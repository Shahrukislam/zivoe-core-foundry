
Reentrancy in OCL_ZVE.forwardYieldKeeper(bytes) (src/lockers/OCL/OCL_ZVE.sol#312-325):
	External calls:
	- convertAsset(pairAsset,_toAsset,amountForConversion,data) (src/lockers/OCL/OCL_ZVE.sol#318)
		- (succ) = address(router1INCH_V4).call(data) (src/lockers/Utility/ZivoeSwapper.sol#187)
	- IERC20(_toAsset).safeTransfer(IZivoeGlobals_OCL_ZVE(GBL).YDL(),IERC20(_toAsset).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#323)
	State variables written after the call(s):
	- amountForConversion = 0 (src/lockers/OCL/OCL_ZVE.sol#324)
Reentrancy in e_OCY_CVX_Modular.forwardYieldKeeperCRV_CVX(address,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#581-606):
	External calls:
	- convertAsset(asset,_toAsset,amountForConversion,data) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#594)
		- (succ) = address(router1INCH_V4).call(data) (src/lockers/Utility/ZivoeSwapper.sol#187)
	- IERC20(_toAsset).safeTransfer(IZivoeGlobals_P_4(GBL).YDL(),IERC20(_toAsset).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#597)
	State variables written after the call(s):
	- toForwardCRV = 0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#601)
	- toForwardCVX = 0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#603)
Reentrancy in OCC_Modular.makePayment(uint256) (src/lockers/OCC/OCC_Modular.sol#500-536):
	External calls:
	- IERC20(stablecoin).safeTransferFrom(_msgSender(),IZivoeGlobals_OCC(GBL).YDL(),interestOwed + lateFee) (src/lockers/OCC/OCC_Modular.sol#517)
	- IERC20(stablecoin).safeTransferFrom(_msgSender(),address(this),interestOwed + lateFee) (src/lockers/OCC/OCC_Modular.sol#520)
	- IERC20(stablecoin).safeTransferFrom(_msgSender(),owner(),principalOwed) (src/lockers/OCC/OCC_Modular.sol#524)
	State variables written after the call(s):
	- loans[id].state = LoanState.Repaid (src/lockers/OCC/OCC_Modular.sol#527)
	- loans[id].paymentDueBy = 0 (src/lockers/OCC/OCC_Modular.sol#528)
	- loans[id].paymentDueBy += loans[id].paymentInterval (src/lockers/OCC/OCC_Modular.sol#531)
	- loans[id].principalOwed -= principalOwed (src/lockers/OCC/OCC_Modular.sol#534)
	- loans[id].paymentsRemaining -= 1 (src/lockers/OCC/OCC_Modular.sol#535)
Reentrancy in OCC_Modular.processPayment(uint256) (src/lockers/OCC/OCC_Modular.sol#542-579):
	External calls:
	- IERC20(stablecoin).safeTransferFrom(loans[id].borrower,IZivoeGlobals_OCC(GBL).YDL(),interestOwed + lateFee) (src/lockers/OCC/OCC_Modular.sol#560)
	- IERC20(stablecoin).safeTransferFrom(loans[id].borrower,address(this),interestOwed + lateFee) (src/lockers/OCC/OCC_Modular.sol#563)
	- IERC20(stablecoin).safeTransferFrom(loans[id].borrower,owner(),principalOwed) (src/lockers/OCC/OCC_Modular.sol#567)
	State variables written after the call(s):
	- loans[id].state = LoanState.Repaid (src/lockers/OCC/OCC_Modular.sol#570)
	- loans[id].paymentDueBy = 0 (src/lockers/OCC/OCC_Modular.sol#571)
	- loans[id].paymentDueBy += loans[id].paymentInterval (src/lockers/OCC/OCC_Modular.sol#574)
	- loans[id].principalOwed -= principalOwed (src/lockers/OCC/OCC_Modular.sol#577)
	- loans[id].paymentsRemaining -= 1 (src/lockers/OCC/OCC_Modular.sol#578)
Reentrancy in OCL_ZVE_CRV_0.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#72-116):
	External calls:
	- IERC20(FRAX).safeApprove(FBP_BP,IERC20(FRAX).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#92)
	- ICRVPlainPoolFBP(FBP_BP).add_liquidity(deposits_bp,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#95)
	- IERC20(USDC).safeApprove(FBP_BP,IERC20(USDC).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#98)
	- ICRVPlainPoolFBP(FBP_BP).add_liquidity(deposits_bp_scope_0,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#101)
	- IERC20(FBP_TOKEN).safeApprove(ZVE_MP,IERC20(FBP_TOKEN).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#106)
	- IERC20(IZivoeGlobals(GBL).ZVE()).safeApprove(ZVE_MP,IERC20(IZivoeGlobals(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#107)
	- ICRVMetaPool(ZVE_MP).add_liquidity(deposits_mp,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#111)
	State variables written after the call(s):
	- baseline = postBaseline - preBaseline (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#115)
Reentrancy in OCL_ZVE_CRV_1.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#75-126):
	External calls:
	- IERC20(DAI).safeApprove(_3CRV_BP,IERC20(DAI).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#96)
	- ICRVPlainPool3CRV(_3CRV_BP).add_liquidity(deposits_bp,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#99)
	- IERC20(USDC).safeApprove(_3CRV_BP,IERC20(USDC).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#102)
	- ICRVPlainPool3CRV(_3CRV_BP).add_liquidity(deposits_bp_scope_0,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#105)
	- IERC20(USDT).safeApprove(_3CRV_BP,IERC20(USDT).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#108)
	- ICRVPlainPool3CRV(_3CRV_BP).add_liquidity(deposits_bp_scope_1,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#111)
	- IERC20(_3CRV_TOKEN).safeApprove(ZVE_MP,IERC20(_3CRV_TOKEN).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#116)
	- IERC20(IZivoeGlobals(GBL).ZVE()).safeApprove(ZVE_MP,IERC20(IZivoeGlobals(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#117)
	- ICRVMetaPool(ZVE_MP).add_liquidity(deposits_mp,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#121)
	State variables written after the call(s):
	- baseline = postBaseline - preBaseline (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#125)
Reentrancy in OCL_ZVE.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/OCL_ZVE.sol#185-225):
	External calls:
	- IERC20(pairAsset).safeApprove(router,IERC20(pairAsset).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#206)
	- IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).safeApprove(router,IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#207)
	- IRouter_OCL_ZVE(router).addLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),IERC20(pairAsset).balanceOf(address(this)),IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).balanceOf(address(this)),IERC20(pairAsset).balanceOf(address(this)),IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).balanceOf(address(this)),address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#208-217)
	State variables written after the call(s):
	- baseline = postBaseline - preBaseline (src/lockers/OCL/OCL_ZVE.sol#224)

OCL_ZVE_CRV_1.pullFromLockerPartial(address,uint256,bytes).tester2 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#160) is a local variable never initialized
e_OCY_CVX_Modular.invest().preBaseline (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#350) is a local variable never initialized
OCL_ZVE_CRV_0.pullFromLockerPartial(address,uint256,bytes).tester (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#147) is a local variable never initialized
e_OCY_CVX_Modular.keeperConvertStablecoin(address,address,bytes).assetOutIsCorrect (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#325) is a local variable never initialized
e_OCY_CVX_Modular.invest().deposits_pp (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#380) is a local variable never initialized
OCL_ZVE.pushToLockerMulti(address[],uint256[],bytes[]).preBaseline (src/lockers/OCL/OCL_ZVE.sol#200) is a local variable never initialized
ZivoeRewards.getRewards().i (src/ZivoeRewards.sol#247) is a local variable never initialized
e_OCY_CVX_Modular.invest().deposits_mp (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#365) is a local variable never initialized
e_OCY_CVX_Modular.removeLiquidityPlainPool(bool).minAmountsOut (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#287) is a local variable never initialized
OCL_ZVE_CRV_1.pullFromLockerMulti(address[],bytes[]).tester (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#137) is a local variable never initialized
e_OCY_CVX_Modular.removeLiquidityPlainPool(bool).minAmountsOut_scope_0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#292) is a local variable never initialized
OCL_ZVE_CRV_1.pushToLockerMulti(address[],uint256[],bytes[]).preBaseline (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#87) is a local variable never initialized
ZivoeRewardsVesting.getRewards().i (src/ZivoeRewardsVesting.sol#427) is a local variable never initialized
OCL_ZVE_CRV_1.pullFromLockerMulti(address[],bytes[]).tester2 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#138) is a local variable never initialized
e_OCY_CVX_Modular.harvestYield().initPoolTokensBalance (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#491) is a local variable never initialized
ERC20Votes._moveVotingPower(address,address,uint256).oldWeight_scope_0 (src/libraries/ZivoeERC20Votes.sol#243) is a local variable never initialized
e_OCY_CVX_Modular.harvestYield().initRewardsBalance (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#492) is a local variable never initialized
ERC20Votes._moveVotingPower(address,address,uint256).newWeight_scope_1 (src/libraries/ZivoeERC20Votes.sol#243) is a local variable never initialized
e_OCY_CVX_Modular.forwardYieldKeeperCRV_CVX(address,bytes).amountForConversion (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#585) is a local variable never initialized
e_OCY_CVX_Modular.invest().deposits_pp_scope_0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#393) is a local variable never initialized
e_OCY_CVX_Modular.removeLiquidityPlainPool(bool).minAmountsOut_scope_1 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#297) is a local variable never initialized
OCL_ZVE_CRV_0.pushToLockerMulti(address[],uint256[],bytes[]).preBaseline (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#84) is a local variable never initialized
OCL_ZVE_CRV_0.pullFromLockerMulti(address[],bytes[]).tester (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#127) is a local variable never initialized
OCL_ZVE_CRV_1.pullFromLockerPartial(address,uint256,bytes).tester (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#159) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
[93m
OCL_ZVE_CRV_0.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#72-116) ignores return value by ICRVPlainPoolFBP(FBP_BP).add_liquidity(deposits_bp,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#95)
OCL_ZVE_CRV_0.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#72-116) ignores return value by ICRVPlainPoolFBP(FBP_BP).add_liquidity(deposits_bp_scope_0,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#101)
OCL_ZVE_CRV_0.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#72-116) ignores return value by ICRVMetaPool(ZVE_MP).add_liquidity(deposits_mp,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#111)
OCL_ZVE_CRV_0.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#121-138) ignores return value by ICRVMetaPool(ZVE_MP).remove_liquidity(IERC20(ZVE_MP).balanceOf(address(this)),tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#128-130)
OCL_ZVE_CRV_0.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#121-138) ignores return value by ICRVPlainPoolFBP(FBP_BP).remove_liquidity(IERC20(FBP_TOKEN).balanceOf(address(this)),tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#131-133)
OCL_ZVE_CRV_0.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#144-158) ignores return value by ICRVMetaPool(ZVE_MP).remove_liquidity(amount,tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#148-150)
OCL_ZVE_CRV_0.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#144-158) ignores return value by ICRVPlainPoolFBP(FBP_BP).remove_liquidity(IERC20(FBP_TOKEN).balanceOf(address(this)),tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#151-153)
OCL_ZVE_CRV_1.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#75-126) ignores return value by ICRVMetaPool(ZVE_MP).add_liquidity(deposits_mp,0) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#121)
OCL_ZVE_CRV_1.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#131-150) ignores return value by ICRVMetaPool(ZVE_MP).remove_liquidity(IERC20(ZVE_MP).balanceOf(address(this)),tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#139-141)
OCL_ZVE_CRV_1.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#156-172) ignores return value by ICRVMetaPool(ZVE_MP).remove_liquidity(amount,tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#161-163)
OCY_AAVE.pushToLocker(address,uint256,bytes) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#69-104) ignores return value by ICRV_MP_256(FRAX3CRV_MP).exchange_underlying(int128(0),int128(2),IERC20(asset).balanceOf(address(this)),0) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#96)
OCY_AAVE._forwardYield() (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#131-138) ignores return value by ILendingPool(AAVE_V2_LendingPool).withdraw(USDC,difference,address(this)) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#134)
OCY_AAVE._forwardYield() (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#131-138) ignores return value by ICRV_MP_256(FRAX3CRV_MP).exchange_underlying(int128(2),int128(0),IERC20(USDC).balanceOf(address(this)),0) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#136)
OCY_AAVE._divest() (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#150-153) ignores return value by ILendingPool(AAVE_V2_LendingPool).withdraw(USDC,type()(uint256).max,IZivoeGlobals(GBL).DAO()) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#151)
OCY_AAVE._divestSpecific(uint256) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#157-160) ignores return value by ILendingPool(AAVE_V2_LendingPool).withdraw(USDC,amount,IZivoeGlobals(GBL).DAO()) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#158)
e_OCY_CVX_Modular.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#256-280) ignores return value by IConvexRewards(CVX_Reward_Address).withdrawAndUnwrap(amount,false) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#266)
e_OCY_CVX_Modular.removeLiquidityPlainPool(bool) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#284-308) ignores return value by ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#288)
e_OCY_CVX_Modular.removeLiquidityPlainPool(bool) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#284-308) ignores return value by ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut_scope_0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#293)
e_OCY_CVX_Modular.removeLiquidityPlainPool(bool) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#284-308) ignores return value by ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut_scope_1) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#298)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) ignores return value by ICRVMetaPool(pool).add_liquidity(deposits_mp,0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#373)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) ignores return value by ICRVPlainPoolFBP(pool).add_liquidity(deposits_pp,0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#390)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) ignores return value by ICRVPlainPoolFBP(pool).add_liquidity(deposits_pp_scope_0,0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#403)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) ignores return value by ICRVPlainPoolFBP(pool).add_liquidity(deposits_pp_scope_2,0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#416)
e_OCY_CVX_Modular.stakeLP() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#433-436) ignores return value by ICVX_Booster(CVX_Deposit_Address).depositAll(convexPoolID,true) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#435)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) ignores return value by IConvexRewards(CVX_Reward_Address).getReward() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#517)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) ignores return value by IConvexRewards(CVX_Reward_Address).withdrawAndUnwrap(amountOfLPToSell,false) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#548)
Governor._execute(uint256,address[],uint256[],bytes[],bytes32) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#316-328) ignores return value by Address.verifyCallResult(success,returndata,errorMessage) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#326)
Governor.relay(address,uint256,bytes) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#543-550) ignores return value by Address.verifyCallResult(success,returndata,Governor: relay reverted without message) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#549)
GovernorVotesQuorumFraction._updateQuorumNumerator(uint256) (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#99-118) ignores return value by _quorumNumeratorHistory.push(newQuorumNumerator) (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#115)
OCL_ZVE.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/OCL_ZVE.sol#185-225) ignores return value by IRouter_OCL_ZVE(router).addLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),IERC20(pairAsset).balanceOf(address(this)),IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).balanceOf(address(this)),IERC20(pairAsset).balanceOf(address(this)),IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).balanceOf(address(this)),address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#208-217)
OCL_ZVE.pullFromLocker(address,bytes) (src/lockers/OCL/OCL_ZVE.sol#230-259) ignores return value by IRouter_OCL_ZVE(router).removeLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),IERC20(pair).balanceOf(address(this)),0,0,address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#237-245)
OCL_ZVE.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCL/OCL_ZVE.sol#265-294) ignores return value by IRouter_OCL_ZVE(router).removeLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),amount,0,0,address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#272-280)
OCL_ZVE._forwardYield(uint256,uint256) (src/lockers/OCL/OCL_ZVE.sol#349-373) ignores return value by IRouter_OCL_ZVE(router).removeLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),lpBurnable,0,0,address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#354-362)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
[92m
ERC20Permit.constructor(string).name (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#44) shadows:
	- ERC20.name() (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#62-64) (function)
	- IERC20Metadata.name() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#17) (function)
IZivoeGlobals_OCE_ZVE.ZVE().ZVE (src/lockers/OCE/OCE_ZVE.sol#23) shadows:
	- IZivoeGlobals_OCE_ZVE.ZVE() (src/lockers/OCE/OCE_ZVE.sol#23) (function)
ZivoeGovernor.constructor(IVotes,ZivoeTimelockController)._timelock (src/ZivoeGovernor.sol#18) shadows:
	- ZivoeGovernorTimelockControl._timelock (src/libraries/ZivoeGovernorTimelockControl.sol#28) (state variable)
IUniswapV3Pool_ZivoeSwapper.token0().token0 (src/lockers/Utility/ZivoeSwapper.sol#10) shadows:
	- IUniswapV3Pool_ZivoeSwapper.token0() (src/lockers/Utility/ZivoeSwapper.sol#10) (function)
IUniswapV3Pool_ZivoeSwapper.token1().token1 (src/lockers/Utility/ZivoeSwapper.sol#14) shadows:
	- IUniswapV3Pool_ZivoeSwapper.token1() (src/lockers/Utility/ZivoeSwapper.sol#14) (function)
ZivoeTranches_IZivoeGlobals.lowerRatioIncentive().lowerRatioIncentive (src/ZivoeTranches.sol#54) shadows:
	- ZivoeTranches_IZivoeGlobals.lowerRatioIncentive() (src/ZivoeTranches.sol#54) (function)
ZivoeTranches_IZivoeGlobals.upperRatioIncentive().upperRatioIncentive (src/ZivoeTranches.sol#59) shadows:
	- ZivoeTranches_IZivoeGlobals.upperRatioIncentive() (src/ZivoeTranches.sol#59) (function)
ZivoeTranches_IZivoeGlobals.minZVEPerJTTMint().minZVEPerJTTMint (src/ZivoeTranches.sol#63) shadows:
	- ZivoeTranches_IZivoeGlobals.minZVEPerJTTMint() (src/ZivoeTranches.sol#63) (function)
ZivoeTranches_IZivoeGlobals.maxZVEPerJTTMint().maxZVEPerJTTMint (src/ZivoeTranches.sol#67) shadows:
	- ZivoeTranches_IZivoeGlobals.maxZVEPerJTTMint() (src/ZivoeTranches.sol#67) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
[92m
OCL_ZVE_CRV_0.constructor(address,address)._GBL (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#40) lacks a zero-check on :
		- GBL = _GBL (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#43)
		- ZVE_MP = ICRVDeployer(CRV_Deployer).deploy_metapool(FBP_BP,ZVE_MetaPool_FBP,ZVE/FBP,IZivoeGlobals(_GBL).ZVE(),250,20000000) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#44-51)
OCL_ZVE_CRV_1.constructor(address,address)._GBL (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#43) lacks a zero-check on :
		- GBL = _GBL (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#46)
		- ZVE_MP = ICRVDeployer(CRV_Deployer).deploy_metapool(_3CRV_BP,ZVE_MetaPool_3CRV,ZVE/3CRV,IZivoeGlobals(_GBL).ZVE(),250,20000000) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#47-54)
OCY_AAVE.constructor(address,address)._GBL (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#45) lacks a zero-check on :
		- GBL = _GBL (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#47)
e_OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[])._CVX_Deposit_Address (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#104) lacks a zero-check on :
		- CVX_Deposit_Address = _CVX_Deposit_Address (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#119)
		- CVX_Reward_Address = ICVX_Booster(_CVX_Deposit_Address).poolInfo(_convexPoolID).crvRewards (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#120)
		- POOL_LP_TOKEN = ICVX_Booster(_CVX_Deposit_Address).poolInfo(_convexPoolID).lptoken (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#137)
		- POOL_LP_TOKEN = ICVX_Booster(_CVX_Deposit_Address).poolInfo(_convexPoolID).lptoken (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#157)
e_OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[])._curvePool (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#103) lacks a zero-check on :
		- pool = _curvePool (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#136)
		- pool = _curvePool (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#156)
e_OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[])._BASE_TOKEN_MP (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#106) lacks a zero-check on :
		- BASE_TOKEN = _BASE_TOKEN_MP (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#138)
e_OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[])._MP_UNDERLYING_LP_POOL (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#107) lacks a zero-check on :
		- MP_UNDERLYING_LP_POOL = _MP_UNDERLYING_LP_POOL (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#139)
OCC_Modular.constructor(address,address,address,address)._stablecoin (src/lockers/OCC/OCC_Modular.sol#116) lacks a zero-check on :
		- stablecoin = _stablecoin (src/lockers/OCC/OCC_Modular.sol#118)
OCC_Modular.constructor(address,address,address,address)._GBL (src/lockers/OCC/OCC_Modular.sol#116) lacks a zero-check on :
		- GBL = _GBL (src/lockers/OCC/OCC_Modular.sol#119)
OCC_Modular.constructor(address,address,address,address)._underwriter (src/lockers/OCC/OCC_Modular.sol#116) lacks a zero-check on :
		- underwriter = _underwriter (src/lockers/OCC/OCC_Modular.sol#120)
OCE_ZVE.constructor(address,address)._GBL (src/lockers/OCE/OCE_ZVE.sol#96) lacks a zero-check on :
		- GBL = _GBL (src/lockers/OCE/OCE_ZVE.sol#99)
OCG_Defaults.constructor(address,address)._GBL (src/lockers/OCG/OCG_Defaults.sol#29) lacks a zero-check on :
		- GBL = _GBL (src/lockers/OCG/OCG_Defaults.sol#31)
OCL_ZVE.constructor(address,address,address,bool)._GBL (src/lockers/OCL/OCL_ZVE.sol#126) lacks a zero-check on :
		- GBL = _GBL (src/lockers/OCL/OCL_ZVE.sol#131)
OCL_ZVE.constructor(address,address,address,bool)._pairAsset (src/lockers/OCL/OCL_ZVE.sol#127) lacks a zero-check on :
		- pairAsset = _pairAsset (src/lockers/OCL/OCL_ZVE.sol#132)
OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[])._CVX_Deposit_Address (src/lockers/OCY/production/OCY_CVX_Modular.sol#105) lacks a zero-check on :
		- CVX_Deposit_Address = _CVX_Deposit_Address (src/lockers/OCY/production/OCY_CVX_Modular.sol#120)
		- CVX_Reward_Address = ICVX_Booster(_CVX_Deposit_Address).poolInfo(_convexPoolID).crvRewards (src/lockers/OCY/production/OCY_CVX_Modular.sol#121)
		- POOL_LP_TOKEN = ICVX_Booster(_CVX_Deposit_Address).poolInfo(_convexPoolID).lptoken (src/lockers/OCY/production/OCY_CVX_Modular.sol#138)
		- POOL_LP_TOKEN = ICVX_Booster(_CVX_Deposit_Address).poolInfo(_convexPoolID).lptoken (src/lockers/OCY/production/OCY_CVX_Modular.sol#158)
OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[])._curvePool (src/lockers/OCY/production/OCY_CVX_Modular.sol#104) lacks a zero-check on :
		- pool = _curvePool (src/lockers/OCY/production/OCY_CVX_Modular.sol#137)
		- pool = _curvePool (src/lockers/OCY/production/OCY_CVX_Modular.sol#157)
OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[])._BASE_TOKEN_MP (src/lockers/OCY/production/OCY_CVX_Modular.sol#107) lacks a zero-check on :
		- BASE_TOKEN = _BASE_TOKEN_MP (src/lockers/OCY/production/OCY_CVX_Modular.sol#139)
OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[])._MP_UNDERLYING_LP_POOL (src/lockers/OCY/production/OCY_CVX_Modular.sol#108) lacks a zero-check on :
		- MP_UNDERLYING_LP_POOL = _MP_UNDERLYING_LP_POOL (src/lockers/OCY/production/OCY_CVX_Modular.sol#140)
ZivoeDAO.constructor(address)._GBL (src/ZivoeDAO.sol#199) lacks a zero-check on :
		- GBL = _GBL (src/ZivoeDAO.sol#200)
ZivoeGlobals.transferZVL(address)._ZVL (src/ZivoeGlobals.sol#192) lacks a zero-check on :
		- ZVL = _ZVL (src/ZivoeGlobals.sol#193)
Governor.relay(address,uint256,bytes).target (lib/openzeppelin-contracts/contracts/governance/Governor.sol#544) lacks a zero-check on :
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#548)
ZivoeITO.constructor(uint256,uint256,address)._GBL (src/ZivoeITO.sol#97) lacks a zero-check on :
		- GBL = _GBL (src/ZivoeITO.sol#104)
ZivoeRewards.constructor(address,address)._GBL (src/ZivoeRewards.sol#63) lacks a zero-check on :
		- GBL = _GBL (src/ZivoeRewards.sol#66)
ZivoeRewardsVesting.constructor(address,address)._stakingToken (src/ZivoeRewardsVesting.sol#86) lacks a zero-check on :
		- vestingToken = _stakingToken (src/ZivoeRewardsVesting.sol#90)
ZivoeRewardsVesting.constructor(address,address)._GBL (src/ZivoeRewardsVesting.sol#87) lacks a zero-check on :
		- GBL = _GBL (src/ZivoeRewardsVesting.sol#91)
ZivoeTimelockController.constructor(uint256,address[],address[],address)._GBL (src/libraries/ZivoeTimelockController.sol#87) lacks a zero-check on :
		- GBL = _GBL (src/libraries/ZivoeTimelockController.sol#94)
ZivoeToken.constructor(string,string,address,address).GBL_ (src/ZivoeToken.sol#32) lacks a zero-check on :
		- _GBL = GBL_ (src/ZivoeToken.sol#34)
ZivoeTranches.constructor(address)._GBL (src/ZivoeTranches.sol#103) lacks a zero-check on :
		- GBL = _GBL (src/ZivoeTranches.sol#104)
ZivoeYDL.constructor(address,address)._GBL (src/ZivoeYDL.sol#123) lacks a zero-check on :
		- GBL = _GBL (src/ZivoeYDL.sol#124)
ZivoeYDL.constructor(address,address)._distributedAsset (src/ZivoeYDL.sol#123) lacks a zero-check on :
		- distributedAsset = _distributedAsset (src/ZivoeYDL.sol#125)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation[0m
[92m
ZivoeLocker.pushToLockerMultiERC721(address[],uint256[],bytes[]) (src/ZivoeLocker.sol#213-219) has external calls inside a loop: ZivoeLocker_IERC721(assets[i]).safeTransferFrom(owner(),address(this),tokenIds[i],data[i]) (src/ZivoeLocker.sol#217)
ZivoeLocker.pullFromLockerMultiERC721(address[],uint256[],bytes[]) (src/ZivoeLocker.sol#225-231) has external calls inside a loop: ZivoeLocker_IERC721(assets[i]).safeTransferFrom(address(this),owner(),tokenIds[i],data[i]) (src/ZivoeLocker.sol#229)
ZivoeLocker.pullFromLockerMulti(address[],bytes[]) (src/ZivoeLocker.sol#169-175) has external calls inside a loop: IERC20(assets[i]).safeTransfer(owner(),IERC20(assets[i]).balanceOf(address(this))) (src/ZivoeLocker.sol#173)
e_OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#100-166) has external calls inside a loop: PP_TOKENS.push(ICRVPlainPoolFBP(pool).coins(i_scope_1)) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#162)
e_OCY_CVX_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#207-249) has external calls inside a loop: IERC20(rewardsAddresses[i_scope_0]).balanceOf(address(this)) > 0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#241)
e_OCY_CVX_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#207-249) has external calls inside a loop: IERC20(rewardsAddresses[i_scope_0]).safeTransfer(owner(),IERC20(rewardsAddresses[i_scope_0]).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#242)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: deposits_pp[i] = IERC20(PP_TOKENS[i]).balanceOf(address(this)) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#383)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: IERC20(PP_TOKENS[i]).balanceOf(address(this)) > 0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#384)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: IERC20(PP_TOKENS[i]).safeApprove(pool,IERC20(PP_TOKENS[i]).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#385)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: deposits_pp_scope_0[i_scope_1] = IERC20(PP_TOKENS[i_scope_1]).balanceOf(address(this)) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#396)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: IERC20(PP_TOKENS[i_scope_1]).balanceOf(address(this)) > 0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#397)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: IERC20(PP_TOKENS[i_scope_1]).safeApprove(pool,IERC20(PP_TOKENS[i_scope_1]).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#398)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: deposits_pp_scope_2[i_scope_3] = IERC20(PP_TOKENS[i_scope_3]).balanceOf(address(this)) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#409)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: IERC20(PP_TOKENS[i_scope_3]).balanceOf(address(this)) > 0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#410)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) has external calls inside a loop: IERC20(PP_TOKENS[i_scope_3]).safeApprove(pool,IERC20(PP_TOKENS[i_scope_3]).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#411)
e_OCY_CVX_Modular.USD_Convertible() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#439-480) has external calls inside a loop: (None,prices[i],None,None,None) = AggregatorV3Interface(chainlinkPriceFeeds[i]).latestRoundData() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#458)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) has external calls inside a loop: _initPoolTokensBalance_scope_0[i] = IERC20(PP_TOKENS[i]).balanceOf(address(this)) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#503)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) has external calls inside a loop: _initRewardsBalance[i_scope_1] = IERC20(rewardsAddresses[i_scope_1]).balanceOf(address(this)) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#511)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) has external calls inside a loop: rewardsAddresses[i_scope_2] == IZivoeYDL_P_3(IZivoeGlobals_P_4(GBL).YDL()).distributedAsset() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#528)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) has external calls inside a loop: IERC20(rewardsAddresses[i_scope_2]).safeTransfer(IZivoeGlobals_P_4(GBL).YDL(),IERC20(rewardsAddresses[i_scope_2]).balanceOf(address(this)) - initRewardsBalance[i_scope_2]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#529)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) has external calls inside a loop: toForwardExtra[i_scope_2] = IERC20(rewardsAddresses[i_scope_2]).balanceOf(address(this)) - initRewardsBalance[i_scope_2] (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#531)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) has external calls inside a loop: PP_TOKENS[i_scope_4] == IZivoeYDL_P_3(IZivoeGlobals_P_4(GBL).YDL()).distributedAsset() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#567)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) has external calls inside a loop: IERC20(PP_TOKENS[i_scope_4]).safeTransfer(IZivoeGlobals_P_4(GBL).YDL(),IERC20(PP_TOKENS[i_scope_4]).balanceOf(address(this)) - initPoolTokensBalance[i_scope_4]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#568)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) has external calls inside a loop: tokensToTransferBaseline_scope_3[i_scope_4] = IERC20(PP_TOKENS[i_scope_4]).balanceOf(address(this)) - initPoolTokensBalance[i_scope_4] (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#570)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: underlyingToken = ICRVMetaPool(MP_UNDERLYING_LP_POOL).coins(i) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#627)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: underlyingTokenAmount = ICRVMetaPool(MP_UNDERLYING_LP_POOL).balances(i) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#628)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: (underlyingTokenPrice) = AggregatorV3Interface(chainlinkPriceFeeds[i + 1]).latestRoundData() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#629)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: standardizedAmount = IZivoeGlobals_P_4(GBL).standardize(underlyingTokenAmount,underlyingToken) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#632)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: totalValueOfUnderlyingPool += (standardizedAmount * uint256(underlyingTokenPrice)) / (10 ** AggregatorV3Interface(chainlinkPriceFeeds[i + 1]).decimals()) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#633)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: tokenAmount = ICRVPlainPoolFBP(pool).balances(i_scope_0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#654)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: (tokenPrice) = AggregatorV3Interface(chainlinkPriceFeeds[i_scope_0]).latestRoundData() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#655)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: standardizedAmount_scope_1 = IZivoeGlobals_P_4(GBL).standardize(tokenAmount,token) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#658)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) has external calls inside a loop: totalValueInPool += (standardizedAmount_scope_1 * uint256(tokenPrice)) / (10 ** AggregatorV3Interface(chainlinkPriceFeeds[i_scope_0]).decimals()) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#659)
OCC_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCC/OCC_Modular.sol#311-318) has external calls inside a loop: IERC20(assets[i]).safeTransfer(owner(),IERC20(assets[i]).balanceOf(address(this))) (src/lockers/OCC/OCC_Modular.sol#313)
OCC_Modular.pullFromLockerMultiPartial(address[],uint256[],bytes[]) (src/lockers/OCC/OCC_Modular.sol#335-342) has external calls inside a loop: assets[i] == stablecoin && IERC20(stablecoin).balanceOf(address(this)) < amountForConversion (src/lockers/OCC/OCC_Modular.sol#338)
OCC_Modular.pullFromLockerMultiPartial(address[],uint256[],bytes[]) (src/lockers/OCC/OCC_Modular.sol#335-342) has external calls inside a loop: amountForConversion = IERC20(stablecoin).balanceOf(address(this)) (src/lockers/OCC/OCC_Modular.sol#339)
OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[]) (src/lockers/OCY/production/OCY_CVX_Modular.sol#101-167) has external calls inside a loop: PP_TOKENS.push(ICRVPlainPoolFBP(pool).coins(i_scope_1)) (src/lockers/OCY/production/OCY_CVX_Modular.sol#163)
ZivoeDAO.pushMulti(address,address[],uint256[],bytes[]) (src/ZivoeDAO.sol#311-327) has external calls inside a loop: IERC20(assets[i_scope_0]).allowance(address(this),locker) > 0 (src/ZivoeDAO.sol#323)
ZivoeDAO.pushMultiERC721(address,address[],uint256[],bytes[]) (src/ZivoeDAO.sol#379-391) has external calls inside a loop: DAO_IERC721(assets[i]).approve(locker,tokenIds[i]) (src/ZivoeDAO.sol#386)
Address.functionCallWithValue(address,bytes,uint256,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#128-137) has external calls inside a loop: (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
ZivoeTimelockController._execute(address,uint256,bytes) (src/libraries/ZivoeTimelockController.sol#378-385) has external calls inside a loop: (success) = target.call{value: value}(data) (src/libraries/ZivoeTimelockController.sol#383)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: _recipient == YDL_IZivoeGlobals(GBL).stSTT() || _recipient == YDL_IZivoeGlobals(GBL).stJTT() (src/ZivoeYDL.sol#436)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YDL_IZivoeRewards(_recipient).depositReward(distributedAsset,_protocol[i]) (src/ZivoeYDL.sol#438)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: _recipient == YDL_IZivoeGlobals(GBL).stZVE() (src/ZivoeYDL.sol#441)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: splitBIPS = (IERC20(YDL_IZivoeGlobals(GBL).stZVE()).totalSupply() * BIPS) / (IERC20(YDL_IZivoeGlobals(GBL).stZVE()).totalSupply() + IERC20(YDL_IZivoeGlobals(GBL).vestZVE()).totalSupply()) (src/ZivoeYDL.sol#442-444)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stZVE(),_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#445)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).vestZVE(),_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#446)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stZVE()).depositReward(distributedAsset,_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#447)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).vestZVE()).depositReward(distributedAsset,_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#448)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).stZVE(),_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#449)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).vestZVE(),_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#450)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: _recipient_scope_1 == YDL_IZivoeGlobals(GBL).stSTT() || _recipient_scope_1 == YDL_IZivoeGlobals(GBL).stJTT() (src/ZivoeYDL.sol#470)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YDL_IZivoeRewards(_recipient_scope_1).depositReward(distributedAsset,_residual[i_scope_0]) (src/ZivoeYDL.sol#472)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: _recipient_scope_1 == YDL_IZivoeGlobals(GBL).stZVE() (src/ZivoeYDL.sol#475)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: splitBIPS_scope_2 = (IERC20(YDL_IZivoeGlobals(GBL).stZVE()).totalSupply() * BIPS) / (IERC20(YDL_IZivoeGlobals(GBL).stZVE()).totalSupply() + IERC20(YDL_IZivoeGlobals(GBL).vestZVE()).totalSupply()) (src/ZivoeYDL.sol#476-478)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stZVE(),_residual[i_scope_0] * splitBIPS_scope_2 / BIPS) (src/ZivoeYDL.sol#479)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).vestZVE(),_residual[i_scope_0] * (BIPS - splitBIPS_scope_2) / BIPS) (src/ZivoeYDL.sol#480)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stZVE()).depositReward(distributedAsset,_residual[i_scope_0] * splitBIPS_scope_2 / BIPS) (src/ZivoeYDL.sol#481)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).vestZVE()).depositReward(distributedAsset,_residual[i_scope_0] * (BIPS - splitBIPS_scope_2) / BIPS) (src/ZivoeYDL.sol#482)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).stZVE(),_residual[i_scope_0] * splitBIPS_scope_2 / BIPS) (src/ZivoeYDL.sol#483)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) has external calls inside a loop: YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).vestZVE(),_residual[i_scope_0] * (BIPS - splitBIPS_scope_2) / BIPS) (src/ZivoeYDL.sol#484)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
[92m
Variable 'ERC20Votes._moveVotingPower(address,address,uint256).newWeight (src/libraries/ZivoeERC20Votes.sol#238)' in ERC20Votes._moveVotingPower(address,address,uint256) (src/libraries/ZivoeERC20Votes.sol#231-247) potentially used before declaration: (oldWeight,newWeight) = _writeCheckpoint(_checkpoints[dst],_add,amount) (src/libraries/ZivoeERC20Votes.sol#243)
Variable 'ERC20Votes._moveVotingPower(address,address,uint256).oldWeight (src/libraries/ZivoeERC20Votes.sol#238)' in ERC20Votes._moveVotingPower(address,address,uint256) (src/libraries/ZivoeERC20Votes.sol#231-247) potentially used before declaration: (oldWeight,newWeight) = _writeCheckpoint(_checkpoints[dst],_add,amount) (src/libraries/ZivoeERC20Votes.sol#243)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#pre-declaration-usage-of-local-variables[0m
[92m
Reentrancy in OCY_AAVE._divest() (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#150-153):
	External calls:
	- ILendingPool(AAVE_V2_LendingPool).withdraw(USDC,type()(uint256).max,IZivoeGlobals(GBL).DAO()) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#151)
	State variables written after the call(s):
	- baseline = 0 (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#152)
Reentrancy in OCY_AAVE._divestSpecific(uint256) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#157-160):
	External calls:
	- ILendingPool(AAVE_V2_LendingPool).withdraw(USDC,amount,IZivoeGlobals(GBL).DAO()) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#158)
	State variables written after the call(s):
	- baseline = 0 (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#159)
Reentrancy in OCL_ZVE._forwardYield(uint256,uint256) (src/lockers/OCL/OCL_ZVE.sol#349-373):
	External calls:
	- IERC20(pair).safeApprove(router,lpBurnable) (src/lockers/OCL/OCL_ZVE.sol#353)
	- IRouter_OCL_ZVE(router).removeLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),lpBurnable,0,0,address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#354-362)
	State variables written after the call(s):
	- amountForConversion = IERC20(pairAsset).balanceOf(address(this)) (src/lockers/OCL/OCL_ZVE.sol#365)
Reentrancy in OCC_Modular.callLoan(uint256) (src/lockers/OCC/OCC_Modular.sol#584-608):
	External calls:
	- IERC20(stablecoin).safeTransferFrom(_msgSender(),address(this),interestOwed + lateFee) (src/lockers/OCC/OCC_Modular.sol#598)
	State variables written after the call(s):
	- amountForConversion += interestOwed + lateFee (src/lockers/OCC/OCC_Modular.sol#599)
Reentrancy in OCC_Modular.fundLoan(uint256) (src/lockers/OCC/OCC_Modular.sol#482-495):
	External calls:
	- IERC20(stablecoin).safeTransfer(loans[id].borrower,loans[id].principalOwed) (src/lockers/OCC/OCC_Modular.sol#490)
	State variables written after the call(s):
	- amountForConversion = IERC20(stablecoin).balanceOf(address(this)) (src/lockers/OCC/OCC_Modular.sol#493)
Reentrancy in e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577):
	External calls:
	- IConvexRewards(CVX_Reward_Address).getReward() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#517)
	State variables written after the call(s):
	- toForwardCRV = IERC20(CRV).balanceOf(address(this)) - initCRVBalance (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#520)
	- toForwardCVX = IERC20(CVX).balanceOf(address(this)) - initCVXBalance (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#521)
	- toForwardExtraRewards = toForwardExtra (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#535)
Reentrancy in e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577):
	External calls:
	- IConvexRewards(CVX_Reward_Address).getReward() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#517)
	- IConvexRewards(CVX_Reward_Address).withdrawAndUnwrap(amountOfLPToSell,false) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#548)
	- ICRVMetaPool(pool).remove_liquidity_one_coin(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),indexBASE_TOKEN,0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#552)
	State variables written after the call(s):
	- toForwardTokensBaseline = tokensToTransferBaseline (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#558)
Reentrancy in e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577):
	External calls:
	- IConvexRewards(CVX_Reward_Address).getReward() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#517)
	- IConvexRewards(CVX_Reward_Address).withdrawAndUnwrap(amountOfLPToSell,false) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#548)
	- ICRVMetaPool(pool).remove_liquidity_one_coin(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),indexBASE_TOKEN,0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#552)
	- IERC20(BASE_TOKEN).safeTransfer(IZivoeGlobals_P_4(GBL).YDL(),IERC20(BASE_TOKEN).balanceOf(address(this)) - initPoolTokensBalance[0]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#555)
	- removeLiquidityPlainPool(false) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#564)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#110)
		- ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#288)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
		- ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut_scope_0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#293)
		- ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut_scope_1) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#298)
		- IERC20(PP_TOKENS[i]).safeTransfer(owner(),IERC20(PP_TOKENS[i]).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#304)
	- IERC20(PP_TOKENS[i_scope_4]).safeTransfer(IZivoeGlobals_P_4(GBL).YDL(),IERC20(PP_TOKENS[i_scope_4]).balanceOf(address(this)) - initPoolTokensBalance[i_scope_4]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#568)
	External calls sending eth:
	- removeLiquidityPlainPool(false) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#564)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
	State variables written after the call(s):
	- toForwardTokensBaseline = tokensToTransferBaseline_scope_3 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#573)
Reentrancy in e_OCY_CVX_Modular.keeperConvertStablecoin(address,address,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#312-341):
	External calls:
	- IERC20(stablecoin).safeApprove(router1INCH_V4,IERC20(stablecoin).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#335)
	- convertAsset(stablecoin,assetOut,IERC20(stablecoin).balanceOf(address(this)),data) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#337)
		- (succ) = address(router1INCH_V4).call(data) (src/lockers/Utility/ZivoeSwapper.sol#187)
	State variables written after the call(s):
	- investTimeLock = block.timestamp + 43200 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#340)
Reentrancy in OCC_Modular.makePayment(uint256) (src/lockers/OCC/OCC_Modular.sol#500-536):
	External calls:
	- IERC20(stablecoin).safeTransferFrom(_msgSender(),address(this),interestOwed + lateFee) (src/lockers/OCC/OCC_Modular.sol#520)
	State variables written after the call(s):
	- amountForConversion += interestOwed + lateFee (src/lockers/OCC/OCC_Modular.sol#521)
Reentrancy in OCC_Modular.processPayment(uint256) (src/lockers/OCC/OCC_Modular.sol#542-579):
	External calls:
	- IERC20(stablecoin).safeTransferFrom(loans[id].borrower,address(this),interestOwed + lateFee) (src/lockers/OCC/OCC_Modular.sol#563)
	State variables written after the call(s):
	- amountForConversion += interestOwed + lateFee (src/lockers/OCC/OCC_Modular.sol#564)
Reentrancy in OCC_Modular.pullFromLocker(address,bytes) (src/lockers/OCC/OCC_Modular.sol#301-306):
	External calls:
	- IERC20(asset).safeTransfer(owner(),IERC20(asset).balanceOf(address(this))) (src/lockers/OCC/OCC_Modular.sol#302)
	State variables written after the call(s):
	- amountForConversion = 0 (src/lockers/OCC/OCC_Modular.sol#304)
Reentrancy in OCL_ZVE.pullFromLocker(address,bytes) (src/lockers/OCL/OCL_ZVE.sol#230-259):
	External calls:
	- IERC20(pair).safeApprove(router,IERC20(pair).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#236)
	- IRouter_OCL_ZVE(router).removeLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),IERC20(pair).balanceOf(address(this)),0,0,address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#237-245)
	- IERC20(pairAsset).safeTransfer(owner(),IERC20(pairAsset).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#248)
	- IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).safeTransfer(owner(),IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#249)
	State variables written after the call(s):
	- baseline = 0 (src/lockers/OCL/OCL_ZVE.sol#250)
Reentrancy in OCL_ZVE.pullFromLocker(address,bytes) (src/lockers/OCL/OCL_ZVE.sol#230-259):
	External calls:
	- IERC20(asset).safeTransfer(owner(),IERC20(asset).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#253)
	State variables written after the call(s):
	- amountForConversion = 0 (src/lockers/OCL/OCL_ZVE.sol#254)
Reentrancy in OCL_ZVE_CRV_0.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#121-138):
	External calls:
	- ICRVMetaPool(ZVE_MP).remove_liquidity(IERC20(ZVE_MP).balanceOf(address(this)),tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#128-130)
	- ICRVPlainPoolFBP(FBP_BP).remove_liquidity(IERC20(FBP_TOKEN).balanceOf(address(this)),tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#131-133)
	- IERC20(USDC).safeTransfer(owner(),IERC20(USDC).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#134)
	- IERC20(FRAX).safeTransfer(owner(),IERC20(FRAX).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#135)
	- IERC20(IZivoeGlobals(GBL).ZVE()).safeTransfer(owner(),IERC20(IZivoeGlobals(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#136)
	State variables written after the call(s):
	- baseline = 0 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#137)
Reentrancy in OCL_ZVE_CRV_1.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#131-150):
	External calls:
	- ICRVMetaPool(ZVE_MP).remove_liquidity(IERC20(ZVE_MP).balanceOf(address(this)),tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#139-141)
	- ICRVPlainPool3CRV(_3CRV_BP).remove_liquidity(IERC20(_3CRV_TOKEN).balanceOf(address(this)),tester2) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#142-144)
	- IERC20(DAI).safeTransfer(owner(),IERC20(DAI).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#145)
	- IERC20(USDC).safeTransfer(owner(),IERC20(USDC).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#146)
	- IERC20(USDT).safeTransfer(owner(),IERC20(USDT).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#147)
	- IERC20(IZivoeGlobals(GBL).ZVE()).safeTransfer(owner(),IERC20(IZivoeGlobals(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#148)
	State variables written after the call(s):
	- baseline = 0 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#149)
Reentrancy in e_OCY_CVX_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#207-249):
	External calls:
	- IConvexRewards(CVX_Reward_Address).withdrawAllAndUnwrap(true) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#213)
	- ICRVMetaPool(pool).remove_liquidity_one_coin(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),indexBASE_TOKEN,0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#214)
	- IERC20(BASE_TOKEN).safeTransfer(owner(),IERC20(BASE_TOKEN).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#215)
	- IConvexRewards(CVX_Reward_Address).withdrawAllAndUnwrap(true) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#225)
	- removeLiquidityPlainPool(true) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#227)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#110)
		- ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#288)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
		- ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut_scope_0) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#293)
		- ICRVPlainPoolFBP(pool).remove_liquidity(IERC20(POOL_LP_TOKEN).balanceOf(address(this)),minAmountsOut_scope_1) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#298)
		- IERC20(PP_TOKENS[i]).safeTransfer(owner(),IERC20(PP_TOKENS[i]).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#304)
	- IERC20(CRV).safeTransfer(owner(),IERC20(CRV).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#232)
	- IERC20(CVX).safeTransfer(owner(),IERC20(CVX).balanceOf(address(this))) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#236)
	External calls sending eth:
	- removeLiquidityPlainPool(true) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#227)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
	State variables written after the call(s):
	- baseline = 0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#247)
Reentrancy in OCC_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCC/OCC_Modular.sol#311-318):
	External calls:
	- IERC20(assets[i]).safeTransfer(owner(),IERC20(assets[i]).balanceOf(address(this))) (src/lockers/OCC/OCC_Modular.sol#313)
	State variables written after the call(s):
	- amountForConversion = 0 (src/lockers/OCC/OCC_Modular.sol#315)
Reentrancy in OCC_Modular.pullFromLockerMultiPartial(address[],uint256[],bytes[]) (src/lockers/OCC/OCC_Modular.sol#335-342):
	External calls:
	- IERC20(assets[i]).safeTransfer(owner(),amounts[i]) (src/lockers/OCC/OCC_Modular.sol#337)
	State variables written after the call(s):
	- amountForConversion = IERC20(stablecoin).balanceOf(address(this)) (src/lockers/OCC/OCC_Modular.sol#339)
Reentrancy in OCL_ZVE_CRV_0.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#144-158):
	External calls:
	- ICRVMetaPool(ZVE_MP).remove_liquidity(amount,tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#148-150)
	- ICRVPlainPoolFBP(FBP_BP).remove_liquidity(IERC20(FBP_TOKEN).balanceOf(address(this)),tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#151-153)
	- IERC20(USDC).safeTransfer(owner(),IERC20(USDC).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#154)
	- IERC20(FRAX).safeTransfer(owner(),IERC20(FRAX).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#155)
	- IERC20(IZivoeGlobals(GBL).ZVE()).safeTransfer(owner(),IERC20(IZivoeGlobals(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#156)
	State variables written after the call(s):
	- baseline = 0 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#157)
Reentrancy in OCL_ZVE_CRV_1.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#156-172):
	External calls:
	- ICRVMetaPool(ZVE_MP).remove_liquidity(amount,tester) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#161-163)
	- ICRVPlainPool3CRV(_3CRV_BP).remove_liquidity(IERC20(_3CRV_TOKEN).balanceOf(address(this)),tester2) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#164-166)
	- IERC20(DAI).safeTransfer(owner(),IERC20(DAI).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#167)
	- IERC20(USDC).safeTransfer(owner(),IERC20(USDC).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#168)
	- IERC20(USDT).safeTransfer(owner(),IERC20(USDT).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#169)
	- IERC20(IZivoeGlobals(GBL).ZVE()).safeTransfer(owner(),IERC20(IZivoeGlobals(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#170)
	State variables written after the call(s):
	- baseline = 0 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#171)
Reentrancy in OCC_Modular.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCC/OCC_Modular.sol#324-329):
	External calls:
	- IERC20(asset).safeTransfer(owner(),amount) (src/lockers/OCC/OCC_Modular.sol#325)
	State variables written after the call(s):
	- amountForConversion = IERC20(stablecoin).balanceOf(address(this)) (src/lockers/OCC/OCC_Modular.sol#327)
Reentrancy in OCL_ZVE.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCL/OCL_ZVE.sol#265-294):
	External calls:
	- IERC20(pair).safeApprove(router,amount) (src/lockers/OCL/OCL_ZVE.sol#271)
	- IRouter_OCL_ZVE(router).removeLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),amount,0,0,address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#272-280)
	- IERC20(pairAsset).safeTransfer(owner(),IERC20(pairAsset).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#283)
	- IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).safeTransfer(owner(),IERC20(IZivoeGlobals_OCL_ZVE(GBL).ZVE()).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#284)
	State variables written after the call(s):
	- (baseline,None) = pairAssetConvertible() (src/lockers/OCL/OCL_ZVE.sol#285)
Reentrancy in OCL_ZVE.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCL/OCL_ZVE.sol#265-294):
	External calls:
	- IERC20(asset).safeTransfer(owner(),amount) (src/lockers/OCL/OCL_ZVE.sol#288)
	State variables written after the call(s):
	- amountForConversion = IERC20(pairAsset).balanceOf(address(this)) (src/lockers/OCL/OCL_ZVE.sol#289)
Reentrancy in OCC_Modular.supplyInterest(uint256,uint256) (src/lockers/OCC/OCC_Modular.sol#668-679):
	External calls:
	- IERC20(stablecoin).safeTransferFrom(_msgSender(),address(this),amount) (src/lockers/OCC/OCC_Modular.sol#676)
	State variables written after the call(s):
	- amountForConversion += amount (src/lockers/OCC/OCC_Modular.sol#677)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
[92m
Reentrancy in OCL_ZVE._forwardYield(uint256,uint256) (src/lockers/OCL/OCL_ZVE.sol#349-373):
	External calls:
	- IERC20(pair).safeApprove(router,lpBurnable) (src/lockers/OCL/OCL_ZVE.sol#353)
	- IRouter_OCL_ZVE(router).removeLiquidity(pairAsset,IZivoeGlobals_OCL_ZVE(GBL).ZVE(),lpBurnable,0,0,address(this),block.timestamp + 1209600) (src/lockers/OCL/OCL_ZVE.sol#354-362)
	Event emitted after the call(s):
	- YieldForwarded(pairAsset,IERC20(pairAsset).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#368)
Reentrancy in ZivoeTranches.depositJunior(uint256,address) (src/ZivoeTranches.sol#191-209):
	External calls:
	- IERC20(asset).safeTransferFrom(depositor,ZivoeTranches_IZivoeGlobals(GBL).DAO(),amount) (src/ZivoeTranches.sol#197)
	Event emitted after the call(s):
	- JuniorDeposit(depositor,asset,amount,incentives) (src/ZivoeTranches.sol#204)
Reentrancy in ZivoeRewards.depositReward(address,uint256) (src/ZivoeRewards.sol#211-226):
	External calls:
	- IERC20(_rewardsToken).safeTransferFrom(_msgSender(),address(this),reward) (src/ZivoeRewards.sol#212)
	Event emitted after the call(s):
	- RewardDeposited(_rewardsToken,reward,_msgSender()) (src/ZivoeRewards.sol#225)
Reentrancy in ZivoeRewardsVesting.depositReward(address,uint256) (src/ZivoeRewardsVesting.sol#318-333):
	External calls:
	- IERC20(_rewardsToken).safeTransferFrom(_msgSender(),address(this),reward) (src/ZivoeRewardsVesting.sol#319)
	Event emitted after the call(s):
	- RewardDeposited(_rewardsToken,reward,_msgSender()) (src/ZivoeRewardsVesting.sol#332)
Reentrancy in ZivoeTranches.depositSenior(uint256,address) (src/ZivoeTranches.sol#215-232):
	External calls:
	- IERC20(asset).safeTransferFrom(depositor,ZivoeTranches_IZivoeGlobals(GBL).DAO(),amount) (src/ZivoeTranches.sol#221)
	Event emitted after the call(s):
	- SeniorDeposit(depositor,asset,amount,incentives) (src/ZivoeTranches.sol#227)
Reentrancy in ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493):
	External calls:
	- IERC20(distributedAsset).safeApprove(_recipient,_protocol[i]) (src/ZivoeYDL.sol#437)
	- YDL_IZivoeRewards(_recipient).depositReward(distributedAsset,_protocol[i]) (src/ZivoeYDL.sol#438)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stZVE(),_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#445)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).vestZVE(),_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#446)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stZVE()).depositReward(distributedAsset,_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#447)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).vestZVE()).depositReward(distributedAsset,_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#448)
	- IERC20(distributedAsset).safeTransfer(_recipient,_protocol[i]) (src/ZivoeYDL.sol#453)
	Event emitted after the call(s):
	- YieldDistributedSingle(distributedAsset,_recipient,_protocol[i]) (src/ZivoeYDL.sol#439)
	- YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).stZVE(),_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#449)
	- YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).vestZVE(),_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#450)
	- YieldDistributedSingle(distributedAsset,_recipient,_protocol[i]) (src/ZivoeYDL.sol#454)
Reentrancy in ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493):
	External calls:
	- IERC20(distributedAsset).safeApprove(_recipient,_protocol[i]) (src/ZivoeYDL.sol#437)
	- YDL_IZivoeRewards(_recipient).depositReward(distributedAsset,_protocol[i]) (src/ZivoeYDL.sol#438)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stZVE(),_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#445)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).vestZVE(),_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#446)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stZVE()).depositReward(distributedAsset,_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#447)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).vestZVE()).depositReward(distributedAsset,_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#448)
	- IERC20(distributedAsset).safeTransfer(_recipient,_protocol[i]) (src/ZivoeYDL.sol#453)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stSTT(),_seniorTranche) (src/ZivoeYDL.sol#459)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stJTT(),_juniorTranche) (src/ZivoeYDL.sol#460)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stSTT()).depositReward(distributedAsset,_seniorTranche) (src/ZivoeYDL.sol#461)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stJTT()).depositReward(distributedAsset,_juniorTranche) (src/ZivoeYDL.sol#462)
	Event emitted after the call(s):
	- YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).stSTT(),_seniorTranche) (src/ZivoeYDL.sol#463)
	- YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).stJTT(),_juniorTranche) (src/ZivoeYDL.sol#464)
Reentrancy in ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493):
	External calls:
	- IERC20(distributedAsset).safeApprove(_recipient,_protocol[i]) (src/ZivoeYDL.sol#437)
	- YDL_IZivoeRewards(_recipient).depositReward(distributedAsset,_protocol[i]) (src/ZivoeYDL.sol#438)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stZVE(),_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#445)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).vestZVE(),_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#446)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stZVE()).depositReward(distributedAsset,_protocol[i] * splitBIPS / BIPS) (src/ZivoeYDL.sol#447)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).vestZVE()).depositReward(distributedAsset,_protocol[i] * (BIPS - splitBIPS) / BIPS) (src/ZivoeYDL.sol#448)
	- IERC20(distributedAsset).safeTransfer(_recipient,_protocol[i]) (src/ZivoeYDL.sol#453)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stSTT(),_seniorTranche) (src/ZivoeYDL.sol#459)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stJTT(),_juniorTranche) (src/ZivoeYDL.sol#460)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stSTT()).depositReward(distributedAsset,_seniorTranche) (src/ZivoeYDL.sol#461)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stJTT()).depositReward(distributedAsset,_juniorTranche) (src/ZivoeYDL.sol#462)
	- IERC20(distributedAsset).safeApprove(_recipient_scope_1,_residual[i_scope_0]) (src/ZivoeYDL.sol#471)
	- YDL_IZivoeRewards(_recipient_scope_1).depositReward(distributedAsset,_residual[i_scope_0]) (src/ZivoeYDL.sol#472)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).stZVE(),_residual[i_scope_0] * splitBIPS_scope_2 / BIPS) (src/ZivoeYDL.sol#479)
	- IERC20(distributedAsset).safeApprove(YDL_IZivoeGlobals(GBL).vestZVE(),_residual[i_scope_0] * (BIPS - splitBIPS_scope_2) / BIPS) (src/ZivoeYDL.sol#480)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).stZVE()).depositReward(distributedAsset,_residual[i_scope_0] * splitBIPS_scope_2 / BIPS) (src/ZivoeYDL.sol#481)
	- YDL_IZivoeRewards(YDL_IZivoeGlobals(GBL).vestZVE()).depositReward(distributedAsset,_residual[i_scope_0] * (BIPS - splitBIPS_scope_2) / BIPS) (src/ZivoeYDL.sol#482)
	- IERC20(distributedAsset).safeTransfer(_recipient_scope_1,_residual[i_scope_0]) (src/ZivoeYDL.sol#487)
	Event emitted after the call(s):
	- YieldDistributedSingle(distributedAsset,_recipient_scope_1,_protocol[i_scope_0]) (src/ZivoeYDL.sol#473)
	- YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).stZVE(),_residual[i_scope_0] * splitBIPS_scope_2 / BIPS) (src/ZivoeYDL.sol#483)
	- YieldDistributedSingle(distributedAsset,YDL_IZivoeGlobals(GBL).vestZVE(),_residual[i_scope_0] * (BIPS - splitBIPS_scope_2) / BIPS) (src/ZivoeYDL.sol#484)
	- YieldDistributedSingle(distributedAsset,_recipient_scope_1,_residual[i_scope_0]) (src/ZivoeYDL.sol#488)
Reentrancy in ZivoeTimelockController.execute(address,uint256,bytes,bytes32,bytes32) (src/libraries/ZivoeTimelockController.sol#307-328):
	External calls:
	- _execute(target,value,payload) (src/libraries/ZivoeTimelockController.sol#318)
		- (success) = target.call{value: value}(data) (src/libraries/ZivoeTimelockController.sol#383)
	Event emitted after the call(s):
	- CallExecuted(id,0,target,value,payload) (src/libraries/ZivoeTimelockController.sol#319)
Reentrancy in ZivoeTimelockController.execute(address,uint256,bytes,bytes32,bytes32) (src/libraries/ZivoeTimelockController.sol#307-328):
	External calls:
	- _execute(target,value,payload) (src/libraries/ZivoeTimelockController.sol#324)
		- (success) = target.call{value: value}(data) (src/libraries/ZivoeTimelockController.sol#383)
	Event emitted after the call(s):
	- CallExecuted(id,0,target,value,payload) (src/libraries/ZivoeTimelockController.sol#325)
Reentrancy in ZivoeTimelockController.executeBatch(address[],uint256[],bytes[],bytes32,bytes32) (src/libraries/ZivoeTimelockController.sol#339-373):
	External calls:
	- _execute(target,value,payload) (src/libraries/ZivoeTimelockController.sol#357)
		- (success) = target.call{value: value}(data) (src/libraries/ZivoeTimelockController.sol#383)
	Event emitted after the call(s):
	- CallExecuted(id,i,target,value,payload) (src/libraries/ZivoeTimelockController.sol#358)
Reentrancy in ZivoeTimelockController.executeBatch(address[],uint256[],bytes[],bytes32,bytes32) (src/libraries/ZivoeTimelockController.sol#339-373):
	External calls:
	- _execute(target_scope_1,value_scope_2,payload_scope_3) (src/libraries/ZivoeTimelockController.sol#368)
		- (success) = target.call{value: value}(data) (src/libraries/ZivoeTimelockController.sol#383)
	Event emitted after the call(s):
	- CallExecuted(id,i_scope_0,target_scope_1,value_scope_2,payload_scope_3) (src/libraries/ZivoeTimelockController.sol#369)
Reentrancy in OCC_Modular.forwardInterestKeeper(bytes) (src/lockers/OCC/OCC_Modular.sol#683-696):
	External calls:
	- convertAsset(stablecoin,_toAsset,amountForConversion,data) (src/lockers/OCC/OCC_Modular.sol#689)
		- (succ) = address(router1INCH_V4).call(data) (src/lockers/Utility/ZivoeSwapper.sol#187)
	Event emitted after the call(s):
	- InterestConverted(_toAsset,amountForConversion,IERC20(_toAsset).balanceOf(address(this))) (src/lockers/OCC/OCC_Modular.sol#691)
Reentrancy in OCL_ZVE.forwardYieldKeeper(bytes) (src/lockers/OCL/OCL_ZVE.sol#312-325):
	External calls:
	- convertAsset(pairAsset,_toAsset,amountForConversion,data) (src/lockers/OCL/OCL_ZVE.sol#318)
		- (succ) = address(router1INCH_V4).call(data) (src/lockers/Utility/ZivoeSwapper.sol#187)
	Event emitted after the call(s):
	- YieldForwarded(_toAsset,IERC20(_toAsset).balanceOf(address(this))) (src/lockers/OCL/OCL_ZVE.sol#320)
Reentrancy in ZivoeRewards.fullWithdraw() (src/ZivoeRewards.sol#229-232):
	External calls:
	- withdraw(_balances[_msgSender()]) (src/ZivoeRewards.sol#230)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#110)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
		- stakingToken.safeTransfer(_msgSender(),amount) (src/ZivoeRewards.sol#269)
	- getRewards() (src/ZivoeRewards.sol#231)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#110)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
		- IERC20(_rewardsToken).safeTransfer(_msgSender(),reward) (src/ZivoeRewards.sol#257)
	External calls sending eth:
	- withdraw(_balances[_msgSender()]) (src/ZivoeRewards.sol#230)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
	- getRewards() (src/ZivoeRewards.sol#231)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
	Event emitted after the call(s):
	- RewardDistributed(_msgSender(),_rewardsToken,reward) (src/ZivoeRewards.sol#258)
		- getRewards() (src/ZivoeRewards.sol#231)
Reentrancy in ZivoeRewardsVesting.fullWithdraw() (src/ZivoeRewardsVesting.sol#336-339):
	External calls:
	- withdraw() (src/ZivoeRewardsVesting.sol#337)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#110)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
		- stakingToken.safeTransfer(_msgSender(),amount) (src/ZivoeRewardsVesting.sol#452)
	- getRewards() (src/ZivoeRewardsVesting.sol#338)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#110)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
		- IERC20(_rewardsToken).safeTransfer(_msgSender(),reward) (src/ZivoeRewardsVesting.sol#437)
	External calls sending eth:
	- withdraw() (src/ZivoeRewardsVesting.sol#337)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
	- getRewards() (src/ZivoeRewardsVesting.sol#338)
		- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
	Event emitted after the call(s):
	- RewardDistributed(_msgSender(),_rewardsToken,reward) (src/ZivoeRewardsVesting.sol#438)
		- getRewards() (src/ZivoeRewardsVesting.sol#338)
Reentrancy in ZivoeRewards.getRewardAt(uint256) (src/ZivoeRewards.sol#252-260):
	External calls:
	- IERC20(_rewardsToken).safeTransfer(_msgSender(),reward) (src/ZivoeRewards.sol#257)
	Event emitted after the call(s):
	- RewardDistributed(_msgSender(),_rewardsToken,reward) (src/ZivoeRewards.sol#258)
Reentrancy in ZivoeRewardsVesting.getRewardAt(uint256) (src/ZivoeRewardsVesting.sol#432-440):
	External calls:
	- IERC20(_rewardsToken).safeTransfer(_msgSender(),reward) (src/ZivoeRewardsVesting.sol#437)
	Event emitted after the call(s):
	- RewardDistributed(_msgSender(),_rewardsToken,reward) (src/ZivoeRewardsVesting.sol#438)
Reentrancy in ZivoeDAO.pushMulti(address,address[],uint256[],bytes[]) (src/ZivoeDAO.sol#311-327):
	External calls:
	- IERC20(assets[i]).safeApprove(locker,amounts[i]) (src/ZivoeDAO.sol#318)
	Event emitted after the call(s):
	- Pushed(locker,assets[i],amounts[i],data[i]) (src/ZivoeDAO.sol#319)
Reentrancy in ZivoeDAO.pushMultiERC721(address,address[],uint256[],bytes[]) (src/ZivoeDAO.sol#379-391):
	External calls:
	- DAO_IERC721(assets[i]).approve(locker,tokenIds[i]) (src/ZivoeDAO.sol#386)
	Event emitted after the call(s):
	- PushedERC721(locker,assets[i],tokenIds[i],data[i]) (src/ZivoeDAO.sol#387)
Reentrancy in ZivoeGovernorTimelockControl.queue(address[],uint256[],bytes[],bytes32) (src/libraries/ZivoeGovernorTimelockControl.sol#91-108):
	External calls:
	- _timelock.scheduleBatch(targets,values,calldatas,0,descriptionHash,delay) (src/libraries/ZivoeGovernorTimelockControl.sol#103)
	Event emitted after the call(s):
	- ProposalQueued(proposalId,block.timestamp + delay) (src/libraries/ZivoeGovernorTimelockControl.sol#105)
Reentrancy in ZivoeRewardsVesting.revoke(address) (src/ZivoeRewardsVesting.sol#381-411):
	External calls:
	- stakingToken.safeTransfer(account,amount) (src/ZivoeRewardsVesting.sol#399)
	Event emitted after the call(s):
	- VestingScheduleRevoked(account,vestingAmount - vestingScheduleOf[account].totalWithdrawn,vestingScheduleOf[account].cliffUnix,vestingScheduleOf[account].endingUnix,vestingScheduleOf[account].totalVesting,false) (src/ZivoeRewardsVesting.sol#403-410)
Reentrancy in ZivoeRewards.stake(uint256) (src/ZivoeRewards.sol#236-243):
	External calls:
	- stakingToken.safeTransferFrom(_msgSender(),address(this),amount) (src/ZivoeRewards.sol#241)
	Event emitted after the call(s):
	- Staked(_msgSender(),amount) (src/ZivoeRewards.sol#242)
Reentrancy in ZivoeRewards.withdraw(uint256) (src/ZivoeRewards.sol#264-271):
	External calls:
	- stakingToken.safeTransfer(_msgSender(),amount) (src/ZivoeRewards.sol#269)
	Event emitted after the call(s):
	- Withdrawn(_msgSender(),amount) (src/ZivoeRewards.sol#270)
Reentrancy in ZivoeRewardsVesting.withdraw() (src/ZivoeRewardsVesting.sol#443-455):
	External calls:
	- stakingToken.safeTransfer(_msgSender(),amount) (src/ZivoeRewardsVesting.sol#452)
	Event emitted after the call(s):
	- Withdrawn(_msgSender(),amount) (src/ZivoeRewardsVesting.sol#454)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
[92m
OCL_ZVE_CRV_0.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#72-116) uses timestamp for comparisons
	Dangerous comparisons:
	- nextYieldDistribution == 0 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#81)
OCL_ZVE_CRV_0.forwardYield() (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#161-175) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > nextYieldDistribution - 43200,OCL_ZVE_CRV_0::forwardYield() block.timestamp <= nextYieldDistribution - 12 hours) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#163-166)
	- require(bool,string)(block.timestamp > nextYieldDistribution,OCL_ZVE_CRV_0::forwardYield() block.timestamp <= nextYieldDistribution) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#169)
OCL_ZVE_CRV_1.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#75-126) uses timestamp for comparisons
	Dangerous comparisons:
	- nextYieldDistribution == 0 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#84)
OCL_ZVE_CRV_1.forwardYield() (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#175-189) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > nextYieldDistribution - 43200,OCL_ZVE_CRV_1::forwardYield() block.timestamp <= nextYieldDistribution - 12 hours) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#177-180)
	- require(bool,string)(block.timestamp > nextYieldDistribution,OCL_ZVE_CRV_1::forwardYield() block.timestamp <= nextYieldDistribution) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#183)
OCY_AAVE.forwardYield() (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#124-129) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > nextYieldDistribution,OCY_AAVE::forwardYield() block.timestamp <= nextYieldDistribution) (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#125)
ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#49-68) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#58)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(investTimeLock < block.timestamp,timelock - restricted to keepers for now) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#347)
	- nextYieldDistribution == 0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#359)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(block.timestamp > nextYieldDistribution) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#485)
OCC_Modular.amountOwed(uint256) (src/lockers/OCC/OCC_Modular.sol#350-373) uses timestamp for comparisons
	Dangerous comparisons:
	- loans[id].paymentSchedule == 0 (src/lockers/OCC/OCC_Modular.sol#352)
	- loans[id].paymentsRemaining == 1 (src/lockers/OCC/OCC_Modular.sol#353)
	- block.timestamp > loans[id].paymentDueBy && loans[id].state == LoanState.Active (src/lockers/OCC/OCC_Modular.sol#358)
	- block.timestamp > loans[id].paymentDueBy && loans[id].state == LoanState.Active (src/lockers/OCC/OCC_Modular.sol#367)
OCC_Modular.cancelRequest(uint256) (src/lockers/OCC/OCC_Modular.sol#412-418) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_msgSender() == loans[id].borrower,OCC_Modular::cancelRequest() _msgSender() != loans[id].borrower) (src/lockers/OCC/OCC_Modular.sol#413)
	- require(bool,string)(loans[id].state == LoanState.Initialized,OCC_Modular::cancelRequest() loans[id].state != LoanState.Initialized) (src/lockers/OCC/OCC_Modular.sol#414)
OCC_Modular.fundLoan(uint256) (src/lockers/OCC/OCC_Modular.sol#482-495) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(loans[id].state == LoanState.Initialized,OCC_Modular::fundLoan() loans[id].state != LoanState.Initialized) (src/lockers/OCC/OCC_Modular.sol#483)
	- require(bool,string)(block.timestamp < loans[id].requestExpiry,OCC_Modular::fundLoan() block.timestamp >= loans[id].requestExpiry) (src/lockers/OCC/OCC_Modular.sol#484)
OCC_Modular.makePayment(uint256) (src/lockers/OCC/OCC_Modular.sol#500-536) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(loans[id].state == LoanState.Active,OCC_Modular::makePayment() loans[id].state != LoanState.Active) (src/lockers/OCC/OCC_Modular.sol#501)
OCC_Modular.processPayment(uint256) (src/lockers/OCC/OCC_Modular.sol#542-579) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(loans[id].state == LoanState.Active,OCC_Modular::processPayment() loans[id].state != LoanState.Active) (src/lockers/OCC/OCC_Modular.sol#543)
	- require(bool,string)(block.timestamp > loans[id].paymentDueBy - 259200,OCC_Modular::processPayment() block.timestamp <= loans[id].paymentDueBy - 3 days) (src/lockers/OCC/OCC_Modular.sol#544)
OCC_Modular.callLoan(uint256) (src/lockers/OCC/OCC_Modular.sol#584-608) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_msgSender() == loans[id].borrower,OCC_Modular::callLoan() _msgSender() != loans[id].borrower) (src/lockers/OCC/OCC_Modular.sol#585)
	- require(bool,string)(loans[id].state == LoanState.Active,OCC_Modular::callLoan() loans[id].state != LoanState.Active) (src/lockers/OCC/OCC_Modular.sol#586)
OCC_Modular.markDefault(uint256) (src/lockers/OCC/OCC_Modular.sol#612-627) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(loans[id].state == LoanState.Active,OCC_Modular::markDefault() loans[id].state != LoanState.Active) (src/lockers/OCC/OCC_Modular.sol#613)
	- require(bool,string)(loans[id].paymentDueBy + loans[id].gracePeriod < block.timestamp,OCC_Modular::markDefault() loans[id].paymentDueBy + loans[id].gracePeriod >= block.timestamp) (src/lockers/OCC/OCC_Modular.sol#614-617)
OCC_Modular.markRepaid(uint256) (src/lockers/OCC/OCC_Modular.sol#631-636) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(loans[id].state == LoanState.Resolved,OCC_Modular::markRepaid() loans[id].state != LoanState.Resolved) (src/lockers/OCC/OCC_Modular.sol#632)
OCC_Modular.resolveDefault(uint256,uint256) (src/lockers/OCC/OCC_Modular.sol#641-663) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(loans[id].state == LoanState.Defaulted,OCC_Modular::resolveDefaut() loans[id].state != LoanState.Defaulted) (src/lockers/OCC/OCC_Modular.sol#642-645)
	- amount >= loans[id].principalOwed (src/lockers/OCC/OCC_Modular.sol#649)
OCC_Modular.supplyInterest(uint256,uint256) (src/lockers/OCC/OCC_Modular.sol#668-679) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(loans[id].state == LoanState.Resolved,OCC_Modular::supplyInterest() loans[id].state != LoanState.Resolved) (src/lockers/OCC/OCC_Modular.sol#669)
OCE_ZVE.rpow(uint256,uint256,uint256) (src/lockers/OCE/OCE_ZVE.sol#237-262) uses timestamp for comparisons
	Dangerous comparisons:
	- switch_expr_12179_1025_60_rpow_asm_0 == 0 (src/lockers/OCE/OCE_ZVE.sol#239)
	- switch_expr_12321_53_60_rpow_asm_0 == 0 (src/lockers/OCE/OCE_ZVE.sol#243)
OCL_ZVE.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCL/OCL_ZVE.sol#185-225) uses timestamp for comparisons
	Dangerous comparisons:
	- nextYieldDistribution == 0 (src/lockers/OCL/OCL_ZVE.sol#196)
OCL_ZVE.forwardYield() (src/lockers/OCL/OCL_ZVE.sol#328-343) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > nextYieldDistribution - 43200,OCL_ZVE::forwardYield() block.timestamp <= nextYieldDistribution - 12 hours) (src/lockers/OCL/OCL_ZVE.sol#330-333)
	- require(bool,string)(block.timestamp > nextYieldDistribution,OCL_ZVE::forwardYield() block.timestamp <= nextYieldDistribution) (src/lockers/OCL/OCL_ZVE.sol#336)
Timers.isPending(Timers.Timestamp) (lib/openzeppelin-contracts/contracts/utils/Timers.sol#34-36) uses timestamp for comparisons
	Dangerous comparisons:
	- timer._deadline > block.timestamp (lib/openzeppelin-contracts/contracts/utils/Timers.sol#35)
Timers.isExpired(Timers.Timestamp) (lib/openzeppelin-contracts/contracts/utils/Timers.sol#38-40) uses timestamp for comparisons
	Dangerous comparisons:
	- isStarted(timer) && timer._deadline <= block.timestamp (lib/openzeppelin-contracts/contracts/utils/Timers.sol#39)
ERC20Votes.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (src/libraries/ZivoeERC20Votes.sol#155-172) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= expiry,ERC20Votes: signature expired) (src/libraries/ZivoeERC20Votes.sol#163)
ZivoeITO.claim() (src/ZivoeITO.sol#159-192) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > end || migrated,ZivoeITO::claim() block.timestamp <= end && !migrated) (src/ZivoeITO.sol#160)
ZivoeITO.depositJunior(uint256,address) (src/ZivoeITO.sol#198-214) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= start,ZivoeITO::depositJunior() block.timestamp < start) (src/ZivoeITO.sol#199)
	- require(bool,string)(block.timestamp < end,ZivoeITO::depositJunior() block.timestamp >= end) (src/ZivoeITO.sol#200)
ZivoeITO.depositSenior(uint256,address) (src/ZivoeITO.sol#220-236) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= start,ZivoeITO::depositSenior() block.timestamp < start) (src/ZivoeITO.sol#221)
	- require(bool,string)(block.timestamp < end,ZivoeITO::depositSenior() block.timestamp >= end) (src/ZivoeITO.sol#222)
ZivoeITO.migrateDeposits() (src/ZivoeITO.sol#240-294) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > end,ZivoeITO::migrateDeposits() block.timestamp <= end) (src/ZivoeITO.sol#242-245)
ZivoeRewards.depositReward(address,uint256) (src/ZivoeRewards.sol#211-226) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= rewardData[_rewardsToken].periodFinish (src/ZivoeRewards.sol#215)
ZivoeRewardsVesting.amountWithdrawable(address) (src/ZivoeRewardsVesting.sol#226-241) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < vestingScheduleOf[account].cliffUnix (src/ZivoeRewardsVesting.sol#227)
	- block.timestamp >= vestingScheduleOf[account].cliffUnix && block.timestamp < vestingScheduleOf[account].endingUnix (src/ZivoeRewardsVesting.sol#230)
	- block.timestamp >= vestingScheduleOf[account].endingUnix (src/ZivoeRewardsVesting.sol#235)
ZivoeRewardsVesting.rewardPerToken(address) (src/ZivoeRewardsVesting.sol#263-272) uses timestamp for comparisons
	Dangerous comparisons:
	- _totalSupply == 0 (src/ZivoeRewardsVesting.sol#264)
ZivoeRewardsVesting.depositReward(address,uint256) (src/ZivoeRewardsVesting.sol#318-333) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= rewardData[_rewardsToken].periodFinish (src/ZivoeRewardsVesting.sol#322)
ZivoeRewardsVesting.vest(address,uint256,uint256,uint256,bool) (src/ZivoeRewardsVesting.sol#347-376) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(IERC20(vestingToken).balanceOf(address(this)) - vestingTokenAllocated >= amountToVest,ZivoeRewardsVesting::vest() amountToVest > IERC20(vestingToken).balanceOf(address(this)) - vestingTokenAllocated) (src/ZivoeRewardsVesting.sol#349-352)
ZivoeRewardsVesting.withdraw() (src/ZivoeRewardsVesting.sol#443-455) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(amount > 0,ZivoeRewardsVesting::withdraw() amountWithdrawable(_msgSender()) == 0) (src/ZivoeRewardsVesting.sol#445)
ZivoeTimelockController.isOperation(bytes32) (src/libraries/ZivoeTimelockController.sol#144-146) uses timestamp for comparisons
	Dangerous comparisons:
	- getTimestamp(id) > 0 (src/libraries/ZivoeTimelockController.sol#145)
ZivoeTimelockController.isOperationPending(bytes32) (src/libraries/ZivoeTimelockController.sol#151-153) uses timestamp for comparisons
	Dangerous comparisons:
	- getTimestamp(id) > _DONE_TIMESTAMP (src/libraries/ZivoeTimelockController.sol#152)
ZivoeTimelockController.isOperationReady(bytes32) (src/libraries/ZivoeTimelockController.sol#158-161) uses timestamp for comparisons
	Dangerous comparisons:
	- timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp (src/libraries/ZivoeTimelockController.sol#160)
ZivoeTimelockController.isOperationReadyKeeper(bytes32) (src/libraries/ZivoeTimelockController.sol#166-169) uses timestamp for comparisons
	Dangerous comparisons:
	- timestamp > _DONE_TIMESTAMP && timestamp - 21600 <= block.timestamp (src/libraries/ZivoeTimelockController.sol#168)
ZivoeTimelockController.isOperationDone(bytes32) (src/libraries/ZivoeTimelockController.sol#174-176) uses timestamp for comparisons
	Dangerous comparisons:
	- getTimestamp(id) == _DONE_TIMESTAMP (src/libraries/ZivoeTimelockController.sol#175)
ZivoeTimelockController._beforeCall(bytes32,bytes32) (src/libraries/ZivoeTimelockController.sol#390-393) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(predecessor == bytes32(0) || isOperationDone(predecessor),ZivoeTimelockController: missing dependency) (src/libraries/ZivoeTimelockController.sol#392)
ZivoeTimelockController._beforeCallKeeper(bytes32,bytes32) (src/libraries/ZivoeTimelockController.sol#406-409) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(predecessor == bytes32(0) || isOperationDone(predecessor),ZivoeTimelockController: missing dependency) (src/libraries/ZivoeTimelockController.sol#408)
ZivoeYDL.distributeYield() (src/ZivoeYDL.sol#385-493) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= lastDistribution + daysBetweenDistributions * 86400,ZivoeYDL::distributeYield() block.timestamp < lastDistribution + daysBetweenDistributions * 86400) (src/ZivoeYDL.sol#387-390)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
[92m
Address._revert(bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#231-243) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Address.sol#236-239)
Checkpoints._unsafeAccess(Checkpoints.Checkpoint[],uint256) (lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol#212-217) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol#213-216)
Checkpoints._unsafeAccess(Checkpoints.Checkpoint224[],uint256) (lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol#376-385) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol#381-384)
Checkpoints._unsafeAccess(Checkpoints.Checkpoint160[],uint256) (lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol#544-553) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol#549-552)
console._sendLogPayload(bytes) (lib/forge-std/src/console.sol#7-15) uses assembly
	- INLINE ASM (lib/forge-std/src/console.sol#11-14)
console2._sendLogPayload(bytes) (lib/forge-std/src/console2.sol#13-20) uses assembly
	- INLINE ASM (lib/forge-std/src/console2.sol#16-19)
ECDSA.tryRecover(bytes32,bytes) (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#55-72) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#63-67)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#66-70)
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#86-93)
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#100-109)
OCE_ZVE.rpow(uint256,uint256,uint256) (src/lockers/OCE/OCE_ZVE.sol#237-262) uses assembly
	- INLINE ASM (src/lockers/OCE/OCE_ZVE.sol#238-261)
Strings.toString(uint256) (lib/openzeppelin-contracts/contracts/utils/Strings.sol#18-38) uses assembly
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Strings.sol#24-26)
	- INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Strings.sol#30-32)
ERC20Votes._unsafeAccess(ERC20Votes.Checkpoint[],uint256) (src/libraries/ZivoeERC20Votes.sol#279-284) uses assembly
	- INLINE ASM (src/libraries/ZivoeERC20Votes.sol#280-283)
ZivoeSwapper.handle_validation_2e95b6c8(bytes,address,address,uint256) (src/lockers/Utility/ZivoeSwapper.sol#122-150) uses assembly
	- INLINE ASM (src/lockers/Utility/ZivoeSwapper.sol#130-133)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
[92m
e_OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#100-166) compares to a boolean constant:
	-extraRewards == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#128)
e_OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#100-166) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#134)
e_OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#100-166) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#154)
e_OCY_CVX_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#207-249) compares to a boolean constant:
	-extraRewards == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#239)
e_OCY_CVX_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#207-249) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#209)
e_OCY_CVX_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#207-249) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#219)
e_OCY_CVX_Modular.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#256-280) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#268)
e_OCY_CVX_Modular.pullFromLockerPartial(address,uint256,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#256-280) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#275)
e_OCY_CVX_Modular.removeLiquidityPlainPool(bool) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#284-308) compares to a boolean constant:
	-_transfer == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#301)
e_OCY_CVX_Modular.keeperConvertStablecoin(address,address,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#312-341) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#319)
e_OCY_CVX_Modular.keeperConvertStablecoin(address,address,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#312-341) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#324)
e_OCY_CVX_Modular.keeperConvertStablecoin(address,address,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#312-341) compares to a boolean constant:
	-require(bool)(assetOutIsCorrect == true && stablecoin != assetOut) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#332)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#363)
e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#377)
e_OCY_CVX_Modular.USD_Convertible() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#439-480) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#442)
e_OCY_CVX_Modular.USD_Convertible() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#439-480) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#452)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) compares to a boolean constant:
	-extraRewards == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#524)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) compares to a boolean constant:
	-extraRewards == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#508)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#500)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#550)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#562)
e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#494)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#610)
e_OCY_CVX_Modular.lpPriceInUSD() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#608-667) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#648)
OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[]) (src/lockers/OCY/production/OCY_CVX_Modular.sol#101-167) compares to a boolean constant:
	-extraRewards == true (src/lockers/OCY/production/OCY_CVX_Modular.sol#129)
OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[]) (src/lockers/OCY/production/OCY_CVX_Modular.sol#101-167) compares to a boolean constant:
	-metaOrPlainPool == true (src/lockers/OCY/production/OCY_CVX_Modular.sol#135)
OCY_CVX_Modular.constructor(address[],bool[],address,address,address[],address,address,uint8,uint8,uint256,address[]) (src/lockers/OCY/production/OCY_CVX_Modular.sol#101-167) compares to a boolean constant:
	-metaOrPlainPool == false (src/lockers/OCY/production/OCY_CVX_Modular.sol#155)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality[0m
[92m
Different versions of Solidity are used:
	- Version used: ['>=0.4.22<0.9.0', '>=0.6.0<0.9.0', '^0.8.0', '^0.8.1', '^0.8.16', '^0.8.4']
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/access/AccessControl.sol#4)
	- ^0.8.1 (lib/openzeppelin-contracts/contracts/utils/Address.sol#4)
	- ^0.8.16 (src/misc/BaseContractTemplate.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol#5)
	- >=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2)
	- >=0.4.22<0.9.0 (lib/forge-std/src/console2.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4)
	- ^0.8.16 (script/Contract.s.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Counters.sol#4)
	- ^0.8.16 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#2)
	- ^0.8.16 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#2)
	- ^0.8.16 (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#2)
	- ^0.8.4 (lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol#3)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol#4)
	- ^0.8.16 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/governance/Governor.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/access/IAccessControl.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/IGovernorTimelock.sol#4)
	- ^0.8.16 (src/misc/InterfacesAggregated.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol#3)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#4)
	- ^0.8.16 (src/lockers/OCC/OCC_Modular.sol#2)
	- ^0.8.16 (src/lockers/OCE/OCE_ZVE.sol#2)
	- ^0.8.16 (src/lockers/OCG/OCG_Defaults.sol#2)
	- ^0.8.16 (src/lockers/OCG/OCG_ERC1155.sol#2)
	- ^0.8.16 (src/lockers/OCG/OCG_ERC20.sol#2)
	- ^0.8.16 (src/lockers/OCG/OCG_ERC721.sol#2)
	- ^0.8.16 (src/lockers/OCL/OCL_ZVE.sol#2)
	- ^0.8.16 (src/lockers/OCY/production/OCY_CVX_Modular.sol#2)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol#5)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol#4)
	- >=0.6.0<0.9.0 (lib/forge-std/src/Script.sol#2)
	- >=0.6.0<0.9.0 (lib/forge-std/src/StdJson.sol#2)
	- ABIEncoderV2 (lib/forge-std/src/StdJson.sol#3)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Strings.sol#4)
	- ^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Timers.sol#4)
	- >=0.6.0<0.9.0 (lib/forge-std/src/Vm.sol#2)
	- ABIEncoderV2 (lib/forge-std/src/Vm.sol#3)
	- ^0.8.16 (src/ZivoeDAO.sol#2)
	- ^0.8.0 (src/libraries/ZivoeERC20Votes.sol#4)
	- ^0.8.16 (src/ZivoeGlobals.sol#2)
	- ^0.8.16 (src/ZivoeGovernor.sol#2)
	- ^0.8.0 (src/libraries/ZivoeGovernorTimelockControl.sol#4)
	- ^0.8.16 (src/ZivoeITO.sol#2)
	- ^0.8.16 (src/ZivoeLocker.sol#2)
	- ^0.8.16 (src/libraries/ZivoeMath.sol#2)
	- ^0.8.0 (src/libraries/ZivoeOwnableLocked.sol#4)
	- ^0.8.16 (src/ZivoeRewards.sol#2)
	- ^0.8.16 (src/ZivoeRewardsVesting.sol#2)
	- ^0.8.16 (src/lockers/Utility/ZivoeSwapper.sol#2)
	- ^0.8.0 (src/libraries/ZivoeTimelockController.sol#4)
	- ^0.8.16 (src/ZivoeToken.sol#2)
	- ^0.8.16 (src/ZivoeTranches.sol#2)
	- ^0.8.16 (src/ZivoeTrancheToken.sol#2)
	- ^0.8.16 (src/ZivoeYDL.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
[92m
OCC_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCC/OCC_Modular.sol#311-318) has costly operations inside a loop:
	- amountForConversion = 0 (src/lockers/OCC/OCC_Modular.sol#315)
OCC_Modular.pullFromLockerMultiPartial(address[],uint256[],bytes[]) (src/lockers/OCC/OCC_Modular.sol#335-342) has costly operations inside a loop:
	- amountForConversion = IERC20(stablecoin).balanceOf(address(this)) (src/lockers/OCC/OCC_Modular.sol#339)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop[0m
[92m
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/access/AccessControl.sol#4) allows old versions
Pragma version^0.8.1 (lib/openzeppelin-contracts/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.16 (src/misc/BaseContractTemplate.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Checkpoints.sol#5) allows old versions
Pragma version>=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2) is too complex
Pragma version>=0.4.22<0.9.0 (lib/forge-std/src/console2.sol#2) is too complex
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4) allows old versions
Pragma version^0.8.16 (script/Contract.s.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Counters.sol#4) allows old versions
Pragma version^0.8.16 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol#4) allows old versions
Pragma version^0.8.16 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/governance/Governor.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/access/IAccessControl.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/governance/extensions/IGovernorTimelock.sol#4) allows old versions
Pragma version^0.8.16 (src/misc/InterfacesAggregated.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol#3) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#4) allows old versions
Pragma version^0.8.16 (src/lockers/OCC/OCC_Modular.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCE/OCE_ZVE.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCG/OCG_Defaults.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCG/OCG_ERC1155.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCG/OCG_ERC20.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCG/OCG_ERC721.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCL/OCL_ZVE.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/OCY/production/OCY_CVX_Modular.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol#5) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol#4) allows old versions
Pragma version>=0.6.0<0.9.0 (lib/forge-std/src/Script.sol#2) is too complex
Pragma version>=0.6.0<0.9.0 (lib/forge-std/src/StdJson.sol#2) is too complex
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Strings.sol#4) allows old versions
Pragma version^0.8.0 (lib/openzeppelin-contracts/contracts/utils/Timers.sol#4) allows old versions
Pragma version>=0.6.0<0.9.0 (lib/forge-std/src/Vm.sol#2) is too complex
Pragma version^0.8.16 (src/ZivoeDAO.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (src/libraries/ZivoeERC20Votes.sol#4) allows old versions
Pragma version^0.8.16 (src/ZivoeGlobals.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/ZivoeGovernor.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (src/libraries/ZivoeGovernorTimelockControl.sol#4) allows old versions
Pragma version^0.8.16 (src/ZivoeITO.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/ZivoeLocker.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/libraries/ZivoeMath.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (src/libraries/ZivoeOwnableLocked.sol#4) allows old versions
Pragma version^0.8.16 (src/ZivoeRewards.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/ZivoeRewardsVesting.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/lockers/Utility/ZivoeSwapper.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (src/libraries/ZivoeTimelockController.sol#4) allows old versions
Pragma version^0.8.16 (src/ZivoeToken.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/ZivoeTranches.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/ZivoeTrancheToken.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.16 (src/ZivoeYDL.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
solc-0.8.16 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
[92m
Low level call in Address.sendValue(address,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#60-65):
	- (success) = recipient.call{value: amount}() (lib/openzeppelin-contracts/contracts/utils/Address.sol#63)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)
Low level call in Address.functionStaticCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#155-162):
	- (success,returndata) = target.staticcall(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#160)
Low level call in Address.functionDelegateCall(address,bytes,string) (lib/openzeppelin-contracts/contracts/utils/Address.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#185)
Low level call in Governor._execute(uint256,address[],uint256[],bytes[],bytes32) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#316-328):
	- (success,returndata) = targets[i].call{value: values[i]}(calldatas[i]) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#325)
Low level call in Governor.relay(address,uint256,bytes) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#543-550):
	- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#548)
Low level call in ZivoeSwapper.convertAsset(address,address,uint256,bytes) (src/lockers/Utility/ZivoeSwapper.sol#162-189):
	- (succ) = address(router1INCH_V4).call(data) (src/lockers/Utility/ZivoeSwapper.sol#187)
Low level call in ZivoeTimelockController._execute(address,uint256,bytes) (src/libraries/ZivoeTimelockController.sol#378-385):
	- (success) = target.call{value: value}(data) (src/libraries/ZivoeTimelockController.sol#383)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
[92m
ZivoeRewards (src/ZivoeRewards.sol#20-273) should inherit from IZivoeRewards_OCE_ZVE (src/lockers/OCE/OCE_ZVE.sol#50-55)
ZivoeRewardsVesting (src/ZivoeRewardsVesting.sol#26-457) should inherit from IZivoeRewards_OCE_ZVE (src/lockers/OCE/OCE_ZVE.sol#50-55)
ZivoeTranches (src/ZivoeTranches.sol#80-314) should inherit from ITO_IZivoeTranches (src/ZivoeITO.sol#46-49)
ZivoeTrancheToken (src/ZivoeTrancheToken.sol#13-93) should inherit from IERC20Mintable (src/misc/InterfacesAggregated.sol#12-15)
ZivoeYDL (src/ZivoeYDL.sol#69-725) should inherit from ITO_IZivoeTranches (src/ZivoeITO.sol#46-49)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance[0m
[92m
Contract console (lib/forge-std/src/console.sol#4-1534) is not in CapWords
Contract console2 (lib/forge-std/src/console2.sol#10-1539) is not in CapWords
Contract OCL_ZVE_CRV_0 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#11-196) is not in CapWords
Function OCL_ZVE_CRV_0.FRAXConvertible() (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#181-186) is not in mixedCase
Constant OCL_ZVE_CRV_0.CRV_Deployer (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES
Variable OCL_ZVE_CRV_0.ZVE_MP (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#25) is not in mixedCase
Variable OCL_ZVE_CRV_0.GBL (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#26) is not in mixedCase
Contract OCL_ZVE_CRV_1 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#11-211) is not in CapWords
Function OCL_ZVE_CRV_1.FRAXConvertible() (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#195-200) is not in mixedCase
Constant OCL_ZVE_CRV_1.CRV_Deployer (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES
Variable OCL_ZVE_CRV_1.ZVE_MP (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#28) is not in mixedCase
Variable OCL_ZVE_CRV_1.GBL (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#29) is not in mixedCase
Contract OCY_AAVE (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#9-162) is not in CapWords
Variable OCY_AAVE.GBL (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#17) is not in mixedCase
Constant OCY_AAVE.AAVE_V2_LendingPool (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#30) is not in UPPER_CASE_WITH_UNDERSCORES
Constant OCY_AAVE.AAVE_V2_aUSDC (src/lockers/OCY/deprecated/Deprecated_OCY_AAVE.sol#31) is not in UPPER_CASE_WITH_UNDERSCORES
Function ERC20Permit.DOMAIN_SEPARATOR() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#81-83) is not in mixedCase
Variable ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#37) is not in mixedCase
Function IERC20Permit.DOMAIN_SEPARATOR() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#59) is not in mixedCase
Variable EIP712._CACHED_DOMAIN_SEPARATOR (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#31) is not in mixedCase
Variable EIP712._CACHED_CHAIN_ID (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#32) is not in mixedCase
Variable EIP712._CACHED_THIS (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#33) is not in mixedCase
Variable EIP712._HASHED_NAME (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#35) is not in mixedCase
Variable EIP712._HASHED_VERSION (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#36) is not in mixedCase
Variable EIP712._TYPE_HASH (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#37) is not in mixedCase
Contract IZivoeGlobals_P_4 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#17-21) is not in CapWords
Function IZivoeGlobals_P_4.YDL() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#18) is not in mixedCase
Contract IZivoeYDL_P_3 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#23-25) is not in CapWords
Contract e_OCY_CVX_Modular (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#30-669) is not in CapWords
Parameter e_OCY_CVX_Modular.removeLiquidityPlainPool(bool)._transfer (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#284) is not in mixedCase
Function e_OCY_CVX_Modular.USD_Convertible() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#439-480) is not in mixedCase
Function e_OCY_CVX_Modular.forwardYieldKeeperCRV_CVX(address,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#581-606) is not in mixedCase
Variable e_OCY_CVX_Modular.GBL (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#38) is not in mixedCase
Variable e_OCY_CVX_Modular.CVX_Deposit_Address (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#52) is not in mixedCase
Variable e_OCY_CVX_Modular.CVX_Reward_Address (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#53) is not in mixedCase
Variable e_OCY_CVX_Modular.POOL_LP_TOKEN (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#66) is not in mixedCase
Variable e_OCY_CVX_Modular.BASE_TOKEN (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#70) is not in mixedCase
Variable e_OCY_CVX_Modular.MP_UNDERLYING_LP_TOKEN (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#71) is not in mixedCase
Variable e_OCY_CVX_Modular.MP_UNDERLYING_LP_POOL (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#72) is not in mixedCase
Variable e_OCY_CVX_Modular.indexBASE_TOKEN (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#75) is not in mixedCase
Variable e_OCY_CVX_Modular.PP_TOKENS (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#78) is not in mixedCase
Function GovernorCountingSimple.COUNTING_MODE() (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol#36-38) is not in mixedCase
Function IGovernor.COUNTING_MODE() (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#107) is not in mixedCase
Function GenericData.GBL() (src/misc/InterfacesAggregated.sol#41) is not in mixedCase
Function IZivoeGovernor.COUNTING_MODE() (src/misc/InterfacesAggregated.sol#93) is not in mixedCase
Function IZivoeGlobals.DAO() (src/misc/InterfacesAggregated.sol#101) is not in mixedCase
Function IZivoeGlobals.ITO() (src/misc/InterfacesAggregated.sol#102) is not in mixedCase
Function IZivoeGlobals.YDL() (src/misc/InterfacesAggregated.sol#107) is not in mixedCase
Function IZivoeGlobals.ZVE() (src/misc/InterfacesAggregated.sol#110) is not in mixedCase
Function IZivoeGlobals.ZVL() (src/misc/InterfacesAggregated.sol#111) is not in mixedCase
Function IZivoeGlobals.ZVT() (src/misc/InterfacesAggregated.sol#112) is not in mixedCase
Function IZivoeGlobals.GOV() (src/misc/InterfacesAggregated.sol#113) is not in mixedCase
Function IZivoeGlobals.TLC() (src/misc/InterfacesAggregated.sol#114) is not in mixedCase
Function IZivoeTranches.GBL() (src/misc/InterfacesAggregated.sol#171) is not in mixedCase
Contract ICVX_Booster (src/misc/InterfacesAggregated.sol#216-221) is not in CapWords
Function ICRVDeployer.deploy_metapool(address,string,string,address,uint256,uint256) (src/misc/InterfacesAggregated.sol#242-249) is not in mixedCase
Parameter ICRVDeployer.deploy_metapool(address,string,string,address,uint256,uint256)._A (src/misc/InterfacesAggregated.sol#247) is not in mixedCase
Function ICRVMetaPool.add_liquidity(uint256[2],uint256) (src/misc/InterfacesAggregated.sol#253) is not in mixedCase
Parameter ICRVMetaPool.add_liquidity(uint256[2],uint256).amounts_in (src/misc/InterfacesAggregated.sol#253) is not in mixedCase
Parameter ICRVMetaPool.add_liquidity(uint256[2],uint256).min_mint_amount (src/misc/InterfacesAggregated.sol#253) is not in mixedCase
Function ICRVMetaPool.calc_withdraw_one_coin(uint256,int128) (src/misc/InterfacesAggregated.sol#254) is not in mixedCase
Parameter ICRVMetaPool.calc_withdraw_one_coin(uint256,int128)._token_amount (src/misc/InterfacesAggregated.sol#254) is not in mixedCase
Parameter ICRVMetaPool.exchange(int128,int128,uint256,uint256).min_dy (src/misc/InterfacesAggregated.sol#257) is not in mixedCase
Function ICRVMetaPool.exchange_underlying(int128,int128,uint256,uint256) (src/misc/InterfacesAggregated.sol#258) is not in mixedCase
Parameter ICRVMetaPool.exchange_underlying(int128,int128,uint256,uint256).min_dy (src/misc/InterfacesAggregated.sol#258) is not in mixedCase
Function ICRVMetaPool.base_pool() (src/misc/InterfacesAggregated.sol#259) is not in mixedCase
Function ICRVMetaPool.remove_liquidity(uint256,uint256[2]) (src/misc/InterfacesAggregated.sol#260) is not in mixedCase
Parameter ICRVMetaPool.remove_liquidity(uint256,uint256[2]).min_amounts_out (src/misc/InterfacesAggregated.sol#260) is not in mixedCase
Function ICRVMetaPool.remove_liquidity_one_coin(uint256,int128,uint256) (src/misc/InterfacesAggregated.sol#261) is not in mixedCase
Parameter ICRVMetaPool.remove_liquidity_one_coin(uint256,int128,uint256).token_amount (src/misc/InterfacesAggregated.sol#261) is not in mixedCase
Parameter ICRVMetaPool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (src/misc/InterfacesAggregated.sol#261) is not in mixedCase
Function ICRVMetaPool.get_dy(int128,int128,uint256) (src/misc/InterfacesAggregated.sol#262) is not in mixedCase
Function ICRVPlainPoolFBP.add_liquidity(uint256[2],uint256) (src/misc/InterfacesAggregated.sol#266) is not in mixedCase
Parameter ICRVPlainPoolFBP.add_liquidity(uint256[2],uint256).amounts_in (src/misc/InterfacesAggregated.sol#266) is not in mixedCase
Parameter ICRVPlainPoolFBP.add_liquidity(uint256[2],uint256).min_mint_amount (src/misc/InterfacesAggregated.sol#266) is not in mixedCase
Function ICRVPlainPoolFBP.add_liquidity(uint256[3],uint256) (src/misc/InterfacesAggregated.sol#267) is not in mixedCase
Parameter ICRVPlainPoolFBP.add_liquidity(uint256[3],uint256).amounts_in (src/misc/InterfacesAggregated.sol#267) is not in mixedCase
Parameter ICRVPlainPoolFBP.add_liquidity(uint256[3],uint256).min_mint_amount (src/misc/InterfacesAggregated.sol#267) is not in mixedCase
Function ICRVPlainPoolFBP.add_liquidity(uint256[4],uint256) (src/misc/InterfacesAggregated.sol#268) is not in mixedCase
Parameter ICRVPlainPoolFBP.add_liquidity(uint256[4],uint256).amounts_in (src/misc/InterfacesAggregated.sol#268) is not in mixedCase
Parameter ICRVPlainPoolFBP.add_liquidity(uint256[4],uint256).min_mint_amount (src/misc/InterfacesAggregated.sol#268) is not in mixedCase
Function ICRVPlainPoolFBP.calc_withdraw_one_coin(uint256,int128) (src/misc/InterfacesAggregated.sol#269) is not in mixedCase
Parameter ICRVPlainPoolFBP.calc_withdraw_one_coin(uint256,int128)._token_amount (src/misc/InterfacesAggregated.sol#269) is not in mixedCase
Function ICRVPlainPoolFBP.remove_liquidity(uint256,uint256[2]) (src/misc/InterfacesAggregated.sol#272) is not in mixedCase
Parameter ICRVPlainPoolFBP.remove_liquidity(uint256,uint256[2]).min_amounts_out (src/misc/InterfacesAggregated.sol#272) is not in mixedCase
Function ICRVPlainPoolFBP.remove_liquidity(uint256,uint256[3]) (src/misc/InterfacesAggregated.sol#273) is not in mixedCase
Parameter ICRVPlainPoolFBP.remove_liquidity(uint256,uint256[3]).min_amounts_out (src/misc/InterfacesAggregated.sol#273) is not in mixedCase
Function ICRVPlainPoolFBP.remove_liquidity(uint256,uint256[4]) (src/misc/InterfacesAggregated.sol#274) is not in mixedCase
Parameter ICRVPlainPoolFBP.remove_liquidity(uint256,uint256[4]).min_amounts_out (src/misc/InterfacesAggregated.sol#274) is not in mixedCase
Function ICRVPlainPoolFBP.remove_liquidity_one_coin(uint256,int128,uint256) (src/misc/InterfacesAggregated.sol#275) is not in mixedCase
Parameter ICRVPlainPoolFBP.remove_liquidity_one_coin(uint256,int128,uint256).token_amount (src/misc/InterfacesAggregated.sol#275) is not in mixedCase
Parameter ICRVPlainPoolFBP.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (src/misc/InterfacesAggregated.sol#275) is not in mixedCase
Function ICRVPlainPoolFBP.calc_token_amount(uint256[2],bool) (src/misc/InterfacesAggregated.sol#276) is not in mixedCase
Parameter ICRVPlainPoolFBP.calc_token_amount(uint256[2],bool)._is_deposit (src/misc/InterfacesAggregated.sol#276) is not in mixedCase
Function ICRVPlainPoolFBP.get_virtual_price() (src/misc/InterfacesAggregated.sol#277) is not in mixedCase
Function ICRVPlainPool3CRV.add_liquidity(uint256[3],uint256) (src/misc/InterfacesAggregated.sol#282) is not in mixedCase
Parameter ICRVPlainPool3CRV.add_liquidity(uint256[3],uint256).amounts_in (src/misc/InterfacesAggregated.sol#282) is not in mixedCase
Parameter ICRVPlainPool3CRV.add_liquidity(uint256[3],uint256).min_mint_amount (src/misc/InterfacesAggregated.sol#282) is not in mixedCase
Function ICRVPlainPool3CRV.remove_liquidity(uint256,uint256[3]) (src/misc/InterfacesAggregated.sol#284) is not in mixedCase
Parameter ICRVPlainPool3CRV.remove_liquidity(uint256,uint256[3]).min_amounts_out (src/misc/InterfacesAggregated.sol#284) is not in mixedCase
Contract ICRV_PP_128_NP (src/misc/InterfacesAggregated.sol#287-289) is not in CapWords
Parameter ICRV_PP_128_NP.exchange(int128,int128,uint256,uint256).min_dy (src/misc/InterfacesAggregated.sol#288) is not in mixedCase
Contract ICRV_MP_256 (src/misc/InterfacesAggregated.sol#291-293) is not in CapWords
Function ICRV_MP_256.exchange_underlying(int128,int128,uint256,uint256) (src/misc/InterfacesAggregated.sol#292) is not in mixedCase
Parameter ICRV_MP_256.exchange_underlying(int128,int128,uint256,uint256).min_dy (src/misc/InterfacesAggregated.sol#292) is not in mixedCase
Contract IZivoeGlobals_OCC (src/lockers/OCC/OCC_Modular.sol#8-35) is not in CapWords
Function IZivoeGlobals_OCC.YDL() (src/lockers/OCC/OCC_Modular.sol#10) is not in mixedCase
Contract IZivoeYDL_OCC (src/lockers/OCC/OCC_Modular.sol#37-41) is not in CapWords
Contract OCC_Modular (src/lockers/OCC/OCC_Modular.sol#49-698) is not in CapWords
Parameter OCC_Modular.requestLoan(address,uint256,uint256,uint256,uint256,uint256,uint256,int8).APR (src/lockers/OCC/OCC_Modular.sol#432) is not in mixedCase
Parameter OCC_Modular.requestLoan(address,uint256,uint256,uint256,uint256,uint256,uint256,int8).APRLateFee (src/lockers/OCC/OCC_Modular.sol#433) is not in mixedCase
Variable OCC_Modular.GBL (src/lockers/OCC/OCC_Modular.sol#94) is not in mixedCase
Contract IZivoeGlobals_OCE_ZVE (src/lockers/OCE/OCE_ZVE.sol#6-48) is not in CapWords
Function IZivoeGlobals_OCE_ZVE.TLC() (src/lockers/OCE/OCE_ZVE.sol#17) is not in mixedCase
Function IZivoeGlobals_OCE_ZVE.YDL() (src/lockers/OCE/OCE_ZVE.sol#20) is not in mixedCase
Function IZivoeGlobals_OCE_ZVE.ZVE() (src/lockers/OCE/OCE_ZVE.sol#23) is not in mixedCase
Contract IZivoeRewards_OCE_ZVE (src/lockers/OCE/OCE_ZVE.sol#50-55) is not in CapWords
Contract OCE_ZVE (src/lockers/OCE/OCE_ZVE.sol#61-264) is not in CapWords
Parameter OCE_ZVE.updateDistributionRatioBIPS(uint256[3])._distributionRatioBIPS (src/lockers/OCE/OCE_ZVE.sol#148) is not in mixedCase
Parameter OCE_ZVE.setExponentialDecayPerSecond(uint256)._exponentialDecayPerSecond (src/lockers/OCE/OCE_ZVE.sol#190) is not in mixedCase
Variable OCE_ZVE.GBL (src/lockers/OCE/OCE_ZVE.sol#69) is not in mixedCase
Contract IZivoeGlobals_OCG_Defaults (src/lockers/OCG/OCG_Defaults.sol#6-10) is not in CapWords
Function IZivoeGlobals_OCG_Defaults.TLC() (src/lockers/OCG/OCG_Defaults.sol#7) is not in mixedCase
Contract OCG_Defaults (src/lockers/OCG/OCG_Defaults.sol#13-66) is not in CapWords
Variable OCG_Defaults.GBL (src/lockers/OCG/OCG_Defaults.sol#20) is not in mixedCase
Contract OCG_ERC1155 (src/lockers/OCG/OCG_ERC1155.sol#7-36) is not in CapWords
Contract OCG_ERC20 (src/lockers/OCG/OCG_ERC20.sol#7-56) is not in CapWords
Contract OCG_ERC721 (src/lockers/OCG/OCG_ERC721.sol#7-45) is not in CapWords
Contract IZivoeGlobals_OCL_ZVE (src/lockers/OCL/OCL_ZVE.sol#8-21) is not in CapWords
Function IZivoeGlobals_OCL_ZVE.TLC() (src/lockers/OCL/OCL_ZVE.sol#10) is not in mixedCase
Function IZivoeGlobals_OCL_ZVE.YDL() (src/lockers/OCL/OCL_ZVE.sol#13) is not in mixedCase
Function IZivoeGlobals_OCL_ZVE.ZVE() (src/lockers/OCL/OCL_ZVE.sol#16) is not in mixedCase
Contract IZivoeYDL_OCL_ZVE (src/lockers/OCL/OCL_ZVE.sol#23-27) is not in CapWords
Contract IRouter_OCL_ZVE (src/lockers/OCL/OCL_ZVE.sol#29-72) is not in CapWords
Contract IFactory_OCL_ZVE (src/lockers/OCL/OCL_ZVE.sol#74-80) is not in CapWords
Contract OCL_ZVE (src/lockers/OCL/OCL_ZVE.sol#89-387) is not in CapWords
Parameter OCL_ZVE.updateCompoundingRateBIPS(uint256)._compoundingRateBIPS (src/lockers/OCL/OCL_ZVE.sol#299) is not in mixedCase
Variable OCL_ZVE.GBL (src/lockers/OCL/OCL_ZVE.sol#100) is not in mixedCase
Contract OCY_CVX_Modular (src/lockers/OCY/production/OCY_CVX_Modular.sol#30-186) is not in CapWords
Variable OCY_CVX_Modular.GBL (src/lockers/OCY/production/OCY_CVX_Modular.sol#38) is not in mixedCase
Variable OCY_CVX_Modular.CVX_Deposit_Address (src/lockers/OCY/production/OCY_CVX_Modular.sol#52) is not in mixedCase
Variable OCY_CVX_Modular.CVX_Reward_Address (src/lockers/OCY/production/OCY_CVX_Modular.sol#53) is not in mixedCase
Variable OCY_CVX_Modular.POOL_LP_TOKEN (src/lockers/OCY/production/OCY_CVX_Modular.sol#66) is not in mixedCase
Variable OCY_CVX_Modular.BASE_TOKEN (src/lockers/OCY/production/OCY_CVX_Modular.sol#70) is not in mixedCase
Variable OCY_CVX_Modular.MP_UNDERLYING_LP_TOKEN (src/lockers/OCY/production/OCY_CVX_Modular.sol#71) is not in mixedCase
Variable OCY_CVX_Modular.MP_UNDERLYING_LP_POOL (src/lockers/OCY/production/OCY_CVX_Modular.sol#72) is not in mixedCase
Variable OCY_CVX_Modular.indexBASE_TOKEN (src/lockers/OCY/production/OCY_CVX_Modular.sol#76) is not in mixedCase
Variable OCY_CVX_Modular.PP_TOKENS (src/lockers/OCY/production/OCY_CVX_Modular.sol#79) is not in mixedCase
Variable Script.IS_SCRIPT (lib/forge-std/src/Script.sol#9) is not in mixedCase
Constant Script.vm (lib/forge-std/src/Script.sol#13) is not in UPPER_CASE_WITH_UNDERSCORES
Contract stdJson (lib/forge-std/src/StdJson.sol#8-118) is not in CapWords
Constant stdJson.vm (lib/forge-std/src/StdJson.sol#10) is not in UPPER_CASE_WITH_UNDERSCORES
Contract DAO_IZivoeGlobals (src/ZivoeDAO.sol#11-15) is not in CapWords
Contract DAO_ILocker (src/ZivoeDAO.sol#17-135) is not in CapWords
Contract DAO_IERC721 (src/ZivoeDAO.sol#137-151) is not in CapWords
Contract DAO_IERC1155 (src/ZivoeDAO.sol#153-172) is not in CapWords
Variable ZivoeDAO.GBL (src/ZivoeDAO.sol#189) is not in mixedCase
Contract IZivoeGlobals_P_10 (src/libraries/ZivoeERC20Votes.sol#12-14) is not in CapWords
Function ERC20Votes.GBL() (src/libraries/ZivoeERC20Votes.sol#45-47) is not in mixedCase
Parameter ZivoeGlobals.transferZVL(address)._ZVL (src/ZivoeGlobals.sol#192) is not in mixedCase
Variable ZivoeGlobals.DAO (src/ZivoeGlobals.sol#19) is not in mixedCase
Variable ZivoeGlobals.ITO (src/ZivoeGlobals.sol#20) is not in mixedCase
Variable ZivoeGlobals.YDL (src/ZivoeGlobals.sol#25) is not in mixedCase
Variable ZivoeGlobals.ZVE (src/ZivoeGlobals.sol#28) is not in mixedCase
Variable ZivoeGlobals.ZVL (src/ZivoeGlobals.sol#29) is not in mixedCase
Variable ZivoeGlobals.ZVT (src/ZivoeGlobals.sol#30) is not in mixedCase
Variable ZivoeGlobals.GOV (src/ZivoeGlobals.sol#31) is not in mixedCase
Variable ZivoeGlobals.TLC (src/ZivoeGlobals.sol#32) is not in mixedCase
Contract ITO_IERC20Mintable (src/ZivoeITO.sol#10-15) is not in CapWords
Contract ITO_IZivoeGlobals (src/ZivoeITO.sol#17-44) is not in CapWords
Function ITO_IZivoeGlobals.DAO() (src/ZivoeITO.sol#19) is not in mixedCase
Function ITO_IZivoeGlobals.YDL() (src/ZivoeITO.sol#22) is not in mixedCase
Function ITO_IZivoeGlobals.ZVE() (src/ZivoeITO.sol#31) is not in mixedCase
Function ITO_IZivoeGlobals.ZVL() (src/ZivoeITO.sol#34) is not in mixedCase
Function ITO_IZivoeGlobals.ZVT() (src/ZivoeITO.sol#37) is not in mixedCase
Contract ITO_IZivoeTranches (src/ZivoeITO.sol#46-49) is not in CapWords
Contract ITO_IZivoeYDL (src/ZivoeITO.sol#51-54) is not in CapWords
Variable ZivoeITO.GBL (src/ZivoeITO.sol#71) is not in mixedCase
Constant ZivoeITO.operationAllocation (src/ZivoeITO.sol#81) is not in UPPER_CASE_WITH_UNDERSCORES
Contract ZivoeLocker_IERC721 (src/ZivoeLocker.sol#11-24) is not in CapWords
Contract ZivoeLocker_IERC1155 (src/ZivoeLocker.sol#26-45) is not in CapWords
Parameter ZivoeRewards.getRewardForDuration(address)._rewardsToken (src/ZivoeRewards.sol#160) is not in mixedCase
Parameter ZivoeRewards.earned(address,address)._rewardsToken (src/ZivoeRewards.sol#168) is not in mixedCase
Parameter ZivoeRewards.lastTimeRewardApplicable(address)._rewardsToken (src/ZivoeRewards.sol#177) is not in mixedCase
Parameter ZivoeRewards.rewardPerToken(address)._rewardsToken (src/ZivoeRewards.sol#184) is not in mixedCase
Parameter ZivoeRewards.addReward(address,uint256)._rewardsToken (src/ZivoeRewards.sol#198) is not in mixedCase
Parameter ZivoeRewards.addReward(address,uint256)._rewardsDuration (src/ZivoeRewards.sol#198) is not in mixedCase
Parameter ZivoeRewards.depositReward(address,uint256)._rewardsToken (src/ZivoeRewards.sol#211) is not in mixedCase
Variable ZivoeRewards.GBL (src/ZivoeRewards.sol#37) is not in mixedCase
Contract ZivoeRewardsVesting_IZivoeGlobals (src/ZivoeRewardsVesting.sol#14-17) is not in CapWords
Function ZivoeRewardsVesting_IZivoeGlobals.ZVE() (src/ZivoeRewardsVesting.sol#16) is not in mixedCase
Parameter ZivoeRewardsVesting.getRewardForDuration(address)._rewardsToken (src/ZivoeRewardsVesting.sol#219) is not in mixedCase
Parameter ZivoeRewardsVesting.earned(address,address)._rewardsToken (src/ZivoeRewardsVesting.sol#247) is not in mixedCase
Parameter ZivoeRewardsVesting.lastTimeRewardApplicable(address)._rewardsToken (src/ZivoeRewardsVesting.sol#256) is not in mixedCase
Parameter ZivoeRewardsVesting.rewardPerToken(address)._rewardsToken (src/ZivoeRewardsVesting.sol#263) is not in mixedCase
Parameter ZivoeRewardsVesting.addReward(address,uint256)._rewardsToken (src/ZivoeRewardsVesting.sol#304) is not in mixedCase
Parameter ZivoeRewardsVesting.addReward(address,uint256)._rewardsDuration (src/ZivoeRewardsVesting.sol#304) is not in mixedCase
Parameter ZivoeRewardsVesting.depositReward(address,uint256)._rewardsToken (src/ZivoeRewardsVesting.sol#318) is not in mixedCase
Variable ZivoeRewardsVesting.GBL (src/ZivoeRewardsVesting.sol#53) is not in mixedCase
Contract IUniswapV3Pool_ZivoeSwapper (src/lockers/Utility/ZivoeSwapper.sol#7-15) is not in CapWords
Contract IUniswapV2Pool_ZivoeSwapper (src/lockers/Utility/ZivoeSwapper.sol#17-25) is not in CapWords
Function ZivoeSwapper.handle_validation_7c025200(bytes,address,address,uint256) (src/lockers/Utility/ZivoeSwapper.sol#85-91) is not in mixedCase
Function ZivoeSwapper.handle_validation_e449022e(bytes,address,address,uint256) (src/lockers/Utility/ZivoeSwapper.sol#96-117) is not in mixedCase
Function ZivoeSwapper.handle_validation_2e95b6c8(bytes,address,address,uint256) (src/lockers/Utility/ZivoeSwapper.sol#122-150) is not in mixedCase
Function ZivoeSwapper.handle_validation_d0a3b665(bytes,address,address,uint256) (src/lockers/Utility/ZivoeSwapper.sol#155-160) is not in mixedCase
Variable ZivoeSwapper.router1INCH_V4 (src/lockers/Utility/ZivoeSwapper.sol#38) is not in mixedCase
Contract IZivoeGBL_P_11 (src/libraries/ZivoeTimelockController.sol#11-13) is not in CapWords
Variable ZivoeTimelockController.GBL (src/libraries/ZivoeTimelockController.sol#40) is not in mixedCase
Function ZivoeToken.GBL() (src/ZivoeToken.sol#46-48) is not in mixedCase
Variable ZivoeToken._GBL (src/ZivoeToken.sol#15) is not in mixedCase
Contract ZivoeTranches_IZivoeGlobals (src/ZivoeTranches.sol#11-68) is not in CapWords
Function ZivoeTranches_IZivoeGlobals.ZVE() (src/ZivoeTranches.sol#13) is not in mixedCase
Function ZivoeTranches_IZivoeGlobals.ITO() (src/ZivoeTranches.sol#16) is not in mixedCase
Function ZivoeTranches_IZivoeGlobals.DAO() (src/ZivoeTranches.sol#19) is not in mixedCase
Function ZivoeTranches_IZivoeGlobals.ZVL() (src/ZivoeTranches.sol#22) is not in mixedCase
Contract ZivoeTranches_IERC20Mintable (src/ZivoeTranches.sol#70-75) is not in CapWords
Variable ZivoeTranches.GBL (src/ZivoeTranches.sol#88) is not in mixedCase
Contract YDL_IZivoeRewards (src/ZivoeYDL.sol#11-16) is not in CapWords
Contract YDL_IZivoeGlobals (src/ZivoeYDL.sol#18-61) is not in CapWords
Function YDL_IZivoeGlobals.TLC() (src/ZivoeYDL.sol#20) is not in mixedCase
Function YDL_IZivoeGlobals.ITO() (src/ZivoeYDL.sol#23) is not in mixedCase
Function YDL_IZivoeGlobals.DAO() (src/ZivoeYDL.sol#26) is not in mixedCase
Parameter ZivoeYDL.setTargetAPYBIPS(uint256)._targetAPYBIPS (src/ZivoeYDL.sol#195) is not in mixedCase
Parameter ZivoeYDL.setTargetRatioBIPS(uint256)._targetRatioBIPS (src/ZivoeYDL.sol#204) is not in mixedCase
Parameter ZivoeYDL.setProtocolEarningsRateBIPS(uint256)._protocolEarningsRateBIPS (src/ZivoeYDL.sol#213) is not in mixedCase
Parameter ZivoeYDL.setDistributedAsset(address)._distributedAsset (src/ZivoeYDL.sol#223) is not in mixedCase
Parameter ZivoeYDL.yieldTarget(uint256,uint256,uint256,uint256,uint256).Y (src/ZivoeYDL.sol#559) is not in mixedCase
Parameter ZivoeYDL.yieldTarget(uint256,uint256,uint256,uint256,uint256).Q (src/ZivoeYDL.sol#560) is not in mixedCase
Parameter ZivoeYDL.yieldTarget(uint256,uint256,uint256,uint256,uint256).T (src/ZivoeYDL.sol#561) is not in mixedCase
Function ZivoeYDL.rateSenior_RAY(uint256,uint256,uint256,uint256,uint256,uint256,uint256) (src/ZivoeYDL.sol#577-603) is not in mixedCase
Parameter ZivoeYDL.rateSenior_RAY(uint256,uint256,uint256,uint256,uint256,uint256,uint256).Y (src/ZivoeYDL.sol#581) is not in mixedCase
Parameter ZivoeYDL.rateSenior_RAY(uint256,uint256,uint256,uint256,uint256,uint256,uint256).Q (src/ZivoeYDL.sol#582) is not in mixedCase
Parameter ZivoeYDL.rateSenior_RAY(uint256,uint256,uint256,uint256,uint256,uint256,uint256).T (src/ZivoeYDL.sol#583) is not in mixedCase
Parameter ZivoeYDL.rateSenior_RAY(uint256,uint256,uint256,uint256,uint256,uint256,uint256).R (src/ZivoeYDL.sol#584) is not in mixedCase
Function ZivoeYDL.seniorRateCatchup_RAY(uint256,uint256,uint256,uint256,uint256,uint256) (src/ZivoeYDL.sol#615-626) is not in mixedCase
Parameter ZivoeYDL.seniorRateCatchup_RAY(uint256,uint256,uint256,uint256,uint256,uint256).R (src/ZivoeYDL.sol#620) is not in mixedCase
Parameter ZivoeYDL.seniorRateCatchup_RAY(uint256,uint256,uint256,uint256,uint256,uint256).Q (src/ZivoeYDL.sol#621) is not in mixedCase
Function ZivoeYDL.rateJunior_RAY(uint256,uint256,uint256,uint256) (src/ZivoeYDL.sol#636-649) is not in mixedCase
Parameter ZivoeYDL.rateJunior_RAY(uint256,uint256,uint256,uint256).Y (src/ZivoeYDL.sol#639) is not in mixedCase
Parameter ZivoeYDL.rateJunior_RAY(uint256,uint256,uint256,uint256).Q (src/ZivoeYDL.sol#640) is not in mixedCase
Function ZivoeYDL.seniorRateNominal_RAY(uint256,uint256,uint256,uint256) (src/ZivoeYDL.sol#663-672) is not in mixedCase
Parameter ZivoeYDL.seniorRateNominal_RAY(uint256,uint256,uint256,uint256).Y (src/ZivoeYDL.sol#666) is not in mixedCase
Parameter ZivoeYDL.seniorRateNominal_RAY(uint256,uint256,uint256,uint256).T (src/ZivoeYDL.sol#667) is not in mixedCase
Function ZivoeYDL.seniorRateShortfall_RAY(uint256,uint256,uint256) (src/ZivoeYDL.sol#687-693) is not in mixedCase
Parameter ZivoeYDL.seniorRateShortfall_RAY(uint256,uint256,uint256).Q (src/ZivoeYDL.sol#690) is not in mixedCase
Parameter ZivoeYDL.ema(uint256,uint256,uint256,uint256).N (src/ZivoeYDL.sol#710) is not in mixedCase
Variable ZivoeYDL.GBL (src/ZivoeYDL.sol#86) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
[92m
Variable OCL_ZVE_CRV_0.pushToLockerMulti(address[],uint256[],bytes[]).deposits_bp (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#93) is too similar to OCL_ZVE_CRV_0.pushToLockerMulti(address[],uint256[],bytes[]).deposits_mp (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#108)
Variable OCL_ZVE_CRV_1.pushToLockerMulti(address[],uint256[],bytes[]).deposits_bp (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#97) is too similar to OCL_ZVE_CRV_1.pushToLockerMulti(address[],uint256[],bytes[]).deposits_mp (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#118)
Variable OCL_ZVE_CRV_1.pushToLockerMulti(address[],uint256[],bytes[]).deposits_bp_scope_0 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#103) is too similar to OCL_ZVE_CRV_1.pushToLockerMulti(address[],uint256[],bytes[]).deposits_bp_scope_1 (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#109)
Variable e_OCY_CVX_Modular.invest().deposits_mp (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#365) is too similar to e_OCY_CVX_Modular.invest().deposits_pp (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#380)
Variable e_OCY_CVX_Modular.invest().deposits_pp_scope_0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#393) is too similar to e_OCY_CVX_Modular.invest().deposits_pp_scope_2 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#406)
Variable e_OCY_CVX_Modular.harvestYield().initCRVBalance (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#489) is too similar to e_OCY_CVX_Modular.harvestYield().initCVXBalance (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#490)
Variable e_OCY_CVX_Modular.removeLiquidityPlainPool(bool).minAmountsOut_scope_0 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#292) is too similar to e_OCY_CVX_Modular.removeLiquidityPlainPool(bool).minAmountsOut_scope_1 (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#297)
Variable e_OCY_CVX_Modular.toForwardCRV (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#45) is too similar to e_OCY_CVX_Modular.toForwardCVX (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#46)
Variable ZivoeSwapper.handle_validation_e449022e(bytes,address,address,uint256).zeroForOne_CLENGTH (src/lockers/Utility/ZivoeSwapper.sol#100) is too similar to ZivoeSwapper.handle_validation_2e95b6c8(bytes,address,address,uint256).zeroForOne_DLENGTH (src/lockers/Utility/ZivoeSwapper.sol#127)
Variable ISushiRouter.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (src/misc/InterfacesAggregated.sol#299) is too similar to ISushiRouter.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (src/misc/InterfacesAggregated.sol#300)
Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (src/misc/InterfacesAggregated.sol#346) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (src/misc/InterfacesAggregated.sol#347)
Variable IRouter_OCL_ZVE.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (src/lockers/OCL/OCL_ZVE.sol#45) is too similar to IRouter_OCL_ZVE.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (src/lockers/OCL/OCL_ZVE.sol#46)
Variable OCY_CVX_Modular.toForwardCRV (src/lockers/OCY/production/OCY_CVX_Modular.sol#45) is too similar to OCY_CVX_Modular.toForwardCVX (src/lockers/OCY/production/OCY_CVX_Modular.sol#46)
Variable ZivoeGlobals.adjustedSupplies().zJTTSupply_unadjusted (src/ZivoeGlobals.sol#300) is too similar to ZivoeGlobals.adjustedSupplies().zSTTSupply_unadjusted (src/ZivoeGlobals.sol#303)
Variable ZivoeITO.claim().zJTTClaimed (src/ZivoeITO.sol#159) is too similar to ZivoeITO.claim().zSTTClaimed (src/ZivoeITO.sol#159)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar[0m
[92m
console.slitherConstructorConstantVariables() (lib/forge-std/src/console.sol#4-1534) uses literals with too many digits:
	- CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67) (lib/forge-std/src/console.sol#5)
console2.slitherConstructorConstantVariables() (lib/forge-std/src/console2.sol#10-1539) uses literals with too many digits:
	- CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67) (lib/forge-std/src/console2.sol#11)
OCL_ZVE_CRV_0.constructor(address,address) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#38-52) uses literals with too many digits:
	- ZVE_MP = ICRVDeployer(CRV_Deployer).deploy_metapool(FBP_BP,ZVE_MetaPool_FBP,ZVE/FBP,IZivoeGlobals(_GBL).ZVE(),250,20000000) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_0.sol#44-51)
OCL_ZVE_CRV_1.constructor(address,address) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#41-55) uses literals with too many digits:
	- ZVE_MP = ICRVDeployer(CRV_Deployer).deploy_metapool(_3CRV_BP,ZVE_MetaPool_3CRV,ZVE/3CRV,IZivoeGlobals(_GBL).ZVE(),250,20000000) (src/lockers/OCL/Deprecated_OCL_ZVE_CRV_1.sol#47-54)
e_OCY_CVX_Modular.slitherConstructorConstantVariables() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#30-669) uses literals with too many digits:
	- _REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000 (src/lockers/Utility/ZivoeSwapper.sol#41)
OCC_Modular.slitherConstructorConstantVariables() (src/lockers/OCC/OCC_Modular.sol#49-698) uses literals with too many digits:
	- _REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000 (src/lockers/Utility/ZivoeSwapper.sol#41)
OCE_ZVE.slitherConstructorVariables() (src/lockers/OCE/OCE_ZVE.sol#61-264) uses literals with too many digits:
	- exponentialDecayPerSecond = RAY * 99999998 / 100000000 (src/lockers/OCE/OCE_ZVE.sol#73)
OCL_ZVE.slitherConstructorConstantVariables() (src/lockers/OCL/OCL_ZVE.sol#89-387) uses literals with too many digits:
	- _REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000 (src/lockers/Utility/ZivoeSwapper.sol#41)
OCY_CVX_Modular.slitherConstructorConstantVariables() (src/lockers/OCY/production/OCY_CVX_Modular.sol#30-186) uses literals with too many digits:
	- _REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000 (src/lockers/Utility/ZivoeSwapper.sol#41)
ZivoeToken.constructor(string,string,address,address) (src/ZivoeToken.sol#28-36) uses literals with too many digits:
	- _mint(init,25000000000000000000000000) (src/ZivoeToken.sol#35)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
[92m
OCL_ZVE.BIPS (src/lockers/OCL/OCL_ZVE.sol#112) is never used in OCL_ZVE (src/lockers/OCL/OCL_ZVE.sol#89-387)
ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#37) is never used in ZivoeToken (src/ZivoeToken.sol#9-56)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable[0m
[92m
ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#37) should be constant
GovernorVotesQuorumFraction._quorumNumerator (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol#19) should be constant
OCY_CVX_Modular.baseline (src/lockers/OCY/production/OCY_CVX_Modular.sol#43) should be constant
OCY_CVX_Modular.investTimeLock (src/lockers/OCY/production/OCY_CVX_Modular.sol#40) should be constant
OCY_CVX_Modular.nextYieldDistribution (src/lockers/OCY/production/OCY_CVX_Modular.sol#39) should be constant
OCY_CVX_Modular.toForwardCRV (src/lockers/OCY/production/OCY_CVX_Modular.sol#45) should be constant
OCY_CVX_Modular.toForwardCVX (src/lockers/OCY/production/OCY_CVX_Modular.sol#46) should be constant
OCY_CVX_Modular.yieldOwedToYDL (src/lockers/OCY/production/OCY_CVX_Modular.sol#44) should be constant
Script.IS_SCRIPT (lib/forge-std/src/Script.sol#9) should be constant
ZivoeYDL.daysBetweenDistributions (src/ZivoeYDL.sol#107) should be constant
ZivoeYDL.retrospectiveDistributions (src/ZivoeYDL.sol#108) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

grantRole(bytes32,address) should be declared external:
	- AccessControl.grantRole(bytes32,address) (lib/openzeppelin-contracts/contracts/access/AccessControl.sol#144-146)
revokeRole(bytes32,address) should be declared external:
	- AccessControl.revokeRole(bytes32,address) (lib/openzeppelin-contracts/contracts/access/AccessControl.sol#159-161)
renounceRole(bytes32,address) should be declared external:
	- AccessControl.renounceRole(bytes32,address) (lib/openzeppelin-contracts/contracts/access/AccessControl.sol#179-183)
setUp() should be declared external:
	- ContractScript.setUp() (script/Contract.s.sol#7)
run() should be declared external:
	- ContractScript.run() (script/Contract.s.sol#9-11)
onERC1155Received(address,address,uint256,uint256,bytes) should be declared external:
	- ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes) (lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol#17-25)
	- Governor.onERC1155Received(address,address,uint256,uint256,bytes) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#575-583)
	- ZivoeTimelockController.onERC1155Received(address,address,uint256,uint256,bytes) (src/libraries/ZivoeTimelockController.sol#450-458)
onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) should be declared external:
	- ERC1155Holder.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) (lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol#27-35)
	- Governor.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#588-596)
	- ZivoeTimelockController.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) (src/libraries/ZivoeTimelockController.sol#463-471)
onERC721Received(address,address,uint256,bytes) should be declared external:
	- ERC721Holder.onERC721Received(address,address,uint256,bytes) (lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol#20-27)
	- Governor.onERC721Received(address,address,uint256,bytes) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#563-570)
	- ZivoeTimelockController.onERC721Received(address,address,uint256,bytes) (src/libraries/ZivoeTimelockController.sol#438-445)
pushToLockerMulti(address[],uint256[],bytes[]) should be declared external:
	- e_OCY_CVX_Modular.pushToLockerMulti(address[],uint256[],bytes[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#184-201)
pullFromLockerMulti(address[],bytes[]) should be declared external:
	- e_OCY_CVX_Modular.pullFromLockerMulti(address[],bytes[]) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#207-249)
keeperConvertStablecoin(address,address,bytes) should be declared external:
	- e_OCY_CVX_Modular.keeperConvertStablecoin(address,address,bytes) (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#312-341)
invest() should be declared external:
	- e_OCY_CVX_Modular.invest() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#344-429)
harvestYield() should be declared external:
	- e_OCY_CVX_Modular.harvestYield() (src/lockers/OCY/experiment/e_OCY_CVX_Modular.sol#484-577)
name() should be declared external:
	- Governor.name() (lib/openzeppelin-contracts/contracts/governance/Governor.sol#109-111)
	- IGovernor.name() (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#76)
execute(address[],uint256[],bytes[],bytes32) should be declared external:
	- Governor.execute(address[],uint256[],bytes[],bytes32) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#289-311)
	- IGovernor.execute(address[],uint256[],bytes[],bytes32) (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#212-217)
getVotesWithParams(address,uint256,bytes) should be declared external:
	- Governor.getVotesWithParams(address,uint256,bytes) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#402-408)
	- IGovernor.getVotesWithParams(address,uint256,bytes) (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#179-183)
castVote(uint256,uint8) should be declared external:
	- Governor.castVote(uint256,uint8) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#413-416)
	- IGovernor.castVote(uint256,uint8) (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#224)
castVoteWithReason(uint256,uint8,string) should be declared external:
	- Governor.castVoteWithReason(uint256,uint8,string) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#421-428)
	- IGovernor.castVoteWithReason(uint256,uint8,string) (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#231-235)
castVoteWithReasonAndParams(uint256,uint8,string,bytes) should be declared external:
	- Governor.castVoteWithReasonAndParams(uint256,uint8,string,bytes) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#433-441)
	- IGovernor.castVoteWithReasonAndParams(uint256,uint8,string,bytes) (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#242-247)
castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) should be declared external:
	- Governor.castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#446-460)
	- IGovernor.castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#254-260)
castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32) should be declared external:
	- Governor.castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32) (lib/openzeppelin-contracts/contracts/governance/Governor.sol#465-492)
	- IGovernor.castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32) (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#267-275)
COUNTING_MODE() should be declared external:
	- GovernorCountingSimple.COUNTING_MODE() (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol#36-38)
	- IGovernor.COUNTING_MODE() (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#107)
hasVoted(uint256,address) should be declared external:
	- GovernorCountingSimple.hasVoted(uint256,address) (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol#43-45)
	- IGovernor.hasVoted(uint256,address) (lib/openzeppelin-contracts/contracts/governance/IGovernor.sol#189)
proposalVotes(uint256) should be declared external:
	- GovernorCountingSimple.proposalVotes(uint256) (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol#50-62)
setVotingDelay(uint256) should be declared external:
	- GovernorSettings.setVotingDelay(uint256) (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol#61-63)
setVotingPeriod(uint256) should be declared external:
	- GovernorSettings.setVotingPeriod(uint256) (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol#70-72)
setProposalThreshold(uint256) should be declared external:
	- GovernorSettings.setProposalThreshold(uint256) (lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol#79-81)
timelock() should be declared external:
	- IGovernorTimelock.timelock() (lib/openzeppelin-contracts/contracts/governance/extensions/IGovernorTimelock.sol#16)
	- ZivoeGovernorTimelockControl.timelock() (src/libraries/ZivoeGovernorTimelockControl.sol#76-78)
proposalEta(uint256) should be declared external:
	- IGovernorTimelock.proposalEta(uint256) (lib/openzeppelin-contracts/contracts/governance/extensions/IGovernorTimelock.sol#18)
	- ZivoeGovernorTimelockControl.proposalEta(uint256) (src/libraries/ZivoeGovernorTimelockControl.sol#83-86)
queue(address[],uint256[],bytes[],bytes32) should be declared external:
	- IGovernorTimelock.queue(address[],uint256[],bytes[],bytes32) (lib/openzeppelin-contracts/contracts/governance/extensions/IGovernorTimelock.sol#20-25)
	- ZivoeGovernorTimelockControl.queue(address[],uint256[],bytes[],bytes32) (src/libraries/ZivoeGovernorTimelockControl.sol#91-108)
loanInfo(uint256) should be declared external:
	- OCC_Modular.loanInfo(uint256) (src/lockers/OCC/OCC_Modular.sol#391-408)
setExponentialDecayPerSecond(uint256) should be declared external:
	- OCE_ZVE.setExponentialDecayPerSecond(uint256) (src/lockers/OCE/OCE_ZVE.sol#190-195)
decreaseDefaults(uint256) should be declared external:
	- OCG_Defaults.decreaseDefaults(uint256) (src/lockers/OCG/OCG_Defaults.sol#55-57)
increaseDefaults(uint256) should be declared external:
	- OCG_Defaults.increaseDefaults(uint256) (src/lockers/OCG/OCG_Defaults.sol#62-64)
renounceOwnership() should be declared external:
	- Ownable.renounceOwnership() (lib/openzeppelin-contracts/contracts/access/Ownable.sol#61-63)
transferOwnership(address) should be declared external:
	- Ownable.transferOwnership(address) (lib/openzeppelin-contracts/contracts/access/Ownable.sol#69-72)
renounceOwnership() should be declared external:
	- ZivoeOwnableLocked.renounceOwnership() (src/libraries/ZivoeOwnableLocked.sol#74-76)
viewSchedule(address) should be declared external:
	- ZivoeRewardsVesting.viewSchedule(address) (src/ZivoeRewardsVesting.sol#283-299)
schedule(address,uint256,bytes,bytes32,bytes32,uint256) should be declared external:
	- ZivoeTimelockController.schedule(address,uint256,bytes,bytes32,bytes32,uint256) (src/libraries/ZivoeTimelockController.sol#232-243)
scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256) should be declared external:
	- ZivoeTimelockController.scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256) (src/libraries/ZivoeTimelockController.sol#254-270)
cancel(bytes32) should be declared external:
	- ZivoeTimelockController.cancel(bytes32) (src/libraries/ZivoeTimelockController.sol#288-293)
execute(address,uint256,bytes,bytes32,bytes32) should be declared external:
	- ZivoeTimelockController.execute(address,uint256,bytes,bytes32,bytes32) (src/libraries/ZivoeTimelockController.sol#307-328)
executeBatch(address[],uint256[],bytes[],bytes32,bytes32) should be declared external:
	- ZivoeTimelockController.executeBatch(address[],uint256[],bytes[],bytes32,bytes32) (src/libraries/ZivoeTimelockController.sol#339-373)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
. analyzed (137 contracts with 78 detectors), 783 result(s) found
